{"version":3,"sources":["../../../../src/services/organization/test/get-all-tests-by-organization-id.ts"],"names":["getAllTestsByOrganizationId","organizationId","sort","page","limit","search","startDate","endDate","offset","whereConditions","eq","test","isNull","searchCondition","or","like","sql","between","data","db","_","and","fields","asc","desc","count","pagination"],"mappings":"qIAMA,eAAsBA,CAAAA,CAA4B,CAChD,cAAA,CAAAC,EACA,IAAAC,CAAAA,CAAAA,CAAO,aACP,CAAA,IAAA,CAAAC,CAAO,CAAA,CAAA,CACP,KAAAC,CAAAA,CAAAA,CAAQ,EACR,CAAA,MAAA,CAAAC,CAAS,CAAA,EAAA,CACT,SAAAC,CAAAA,CAAAA,CACA,QAAAC,CACF,CAAA,CAQG,CACD,MAAMC,CAAUL,CAAAA,CAAAA,CAAAA,CAAO,CAAKC,EAAAA,CAAAA,CAGtBK,CAAyB,CAAA,CAC7BC,EAAGC,CAAAA,IAAAA,CAAK,cAAgBV,CAAAA,CAAc,EACtCW,MAAOD,CAAAA,IAAAA,CAAK,SAAS,CACvB,CAGA,CAAA,GAAIN,CAAQ,CAAA,CACV,MAAMQ,CAAAA,CAAkBC,EACtBC,CAAAA,IAAAA,CAAKC,GAAML,CAAAA,EAAAA,IAAAA,CAAK,KAAK,CAAI,CAAA,CAAA,CAAA,CAAA,EAAIN,CAAM,CAAA,CAAA,CAAG,CACtCU,CAAAA,IAAAA,CAAKC,GAAML,CAAAA,EAAAA,IAAAA,CAAK,WAAW,CAAA,CAAA,CAAI,CAAIN,CAAAA,EAAAA,CAAM,CAAG,CAAA,CAAA,CAC9C,EAEAI,CAAgB,CAAA,IAAA,CAAKI,CAAe,EACtC,CAGIP,CAAAA,EAAaC,CACfE,EAAAA,CAAAA,CAAgB,IACdQ,CAAAA,OAAAA,CAAQN,IAAK,CAAA,MAAA,CAAQL,CAAU,CAAA,WAAA,GAAeC,CAAQ,CAAA,WAAA,EAAa,CACrE,CAGF,CAAA,MAAMW,CAAO,CAAA,MAAMC,CAAG,CAAA,KAAA,CAAM,IAAK,CAAA,QAAA,CAAS,CACxC,KAAA,CAAO,CAACC,CAAG,CAAA,CAAE,GAAAC,CAAAA,CAAI,CAAMA,GAAAA,CAAAA,CAAI,GAAGZ,CAAe,CAC7C,CAAA,KAAA,CAAAL,CACA,CAAA,MAAA,CAAAI,CACA,CAAA,OAAA,CAAS,CAACc,CAAQ,CAAA,CAAE,GAAAC,CAAAA,CAAAA,CAAK,IAAAC,CAAAA,CAAK,CAAM,GAAA,CAClC,OAAQtB,CAAAA,EACN,KAAK,YACH,CAAA,OAAO,CAACqB,CAAID,CAAAA,CAAAA,CAAO,SAAS,CAAC,CAC/B,CAAA,KAAK,aACH,CAAA,OAAO,CAACE,CAAAA,CAAKF,CAAO,CAAA,SAAS,CAAC,CAAA,CAChC,KAAK,UACH,CAAA,OAAO,CAACC,CAAAA,CAAID,CAAO,CAAA,MAAM,CAAC,CAAA,CAC5B,KAAK,WAAA,CACH,OAAO,CAACE,CAAKF,CAAAA,CAAAA,CAAO,MAAM,CAAC,CAAA,CAC7B,QACE,OAAO,CAACE,CAAAA,CAAKF,CAAO,CAAA,SAAS,CAAC,CAClC,CACF,CACF,CAAC,CAAA,CAGK,CAAC,CAAE,KAAA,CAAAG,CAAM,CAAC,CAAI,CAAA,MAAMN,CACvB,CAAA,MAAA,CAAO,CACN,KAAA,CAAOH,GACT,CAAA,QAAA,CAAA,CAAC,CACA,CAAA,IAAA,CAAKL,IAAI,CACT,CAAA,KAAA,CAAMU,GAAI,CAAA,GAAGZ,CAAe,CAAC,CAE1BiB,CAAAA,CAAAA,CAAyB,CAC7B,KAAA,CAAOD,CACP,CAAA,IAAA,CAAAtB,CACA,CAAA,KAAA,CAAAC,CACA,CAAA,UAAA,CAAY,IAAK,CAAA,IAAA,CAAKqB,CAAQrB,CAAAA,CAAK,CACrC,CAAA,CAEA,OAAO,CACL,IAAAc,CAAAA,CAAAA,CACA,UAAAQ,CAAAA,CACF,CACF","file":"get-all-tests-by-organization-id.js","sourcesContent":["import db from \"../../../lib/db\";\nimport { test } from \"../../../lib/db/schema\";\nimport { Pagination } from \"../../../types/pagination\";\nimport { SQL, sql } from \"drizzle-orm\";\nimport { and, eq, isNull, like, between, or } from \"drizzle-orm\";\n\nexport async function getAllTestsByOrganizationId({\n  organizationId,\n  sort = \"desc-create\",\n  page = 1,\n  limit = 10,\n  search = \"\",\n  startDate,\n  endDate,\n}: {\n  organizationId: string;\n  page?: number;\n  limit?: number;\n  sort?: \"asc-create\" | \"desc-create\" | \"asc-held\" | \"desc-held\";\n  search?: string;\n  startDate?: Date;\n  endDate?: Date;\n}) {\n  const offset = (page - 1) * limit;\n\n  // Build where conditions\n  const whereConditions: SQL[] = [\n    eq(test.organizationId, organizationId),\n    isNull(test.deletedAt),\n  ];\n\n  // Add search condition if search term is provided\n  if (search) {\n    const searchCondition = or(\n      like(sql`${test.title}`, `%${search}%`),\n      like(sql`${test.description}`, `%${search}%`)\n    ) as SQL;\n\n    whereConditions.push(searchCondition);\n  }\n\n  // Add date range condition if dates are provided\n  if (startDate && endDate) {\n    whereConditions.push(\n      between(test.heldAt, startDate.toISOString(), endDate.toISOString())\n    );\n  }\n\n  const data = await db.query.test.findMany({\n    where: (_, { and }) => and(...whereConditions),\n    limit,\n    offset,\n    orderBy: (fields, { asc, desc }) => {\n      switch (sort) {\n        case \"asc-create\":\n          return [asc(fields.createdAt)];\n        case \"desc-create\":\n          return [desc(fields.createdAt)];\n        case \"asc-held\":\n          return [asc(fields.heldAt)];\n        case \"desc-held\":\n          return [desc(fields.heldAt)];\n        default:\n          return [desc(fields.createdAt)];\n      }\n    },\n  });\n\n  // Get total count using SQL count\n  const [{ count }] = await db\n    .select({\n      count: sql<number>`count(*)`,\n    })\n    .from(test)\n    .where(and(...whereConditions));\n\n  const pagination: Pagination = {\n    total: count,\n    page,\n    limit,\n    totalPages: Math.ceil(count / limit),\n  };\n\n  return {\n    data,\n    pagination,\n  };\n}\n"]}