{"version":3,"sources":["../../src/middlewares/auth.middleware.ts"],"names":["userMiddleware","c","session","auth","userInfo","user","organizationMiddleware","request","error","organizer","getSelectedOrganizerByUserId","createOrganizer","errorBody"],"mappings":"+NAMO,MAAMA,CAAiB,CAAA,MAAOC,CAAe,EAAA,CAClD,MAAMC,CAAAA,CAAU,MAAMC,IAAAA,CAAK,GAAI,CAAA,UAAA,CAAW,CAAE,OAAA,CAASF,CAAE,CAAA,OAAA,CAAQ,OAAQ,CAAC,CAExE,CAAA,OAAKC,CAQE,CAAA,CACL,IAAMA,CAAAA,CAAAA,CAAQ,IACd,CAAA,OAAA,CAASA,CAAQ,CAAA,OACnB,CAVED,EAAAA,CAAAA,CAAE,GAAI,CAAA,MAAA,CAAS,GACR,CAAA,CACL,OAAS,CAAA,OAAA,CACT,OAAS,CAAA,uCACX,CAOJ,CAAA,CAAA,CAEaG,CAAW,CAAA,CAACC,CAAmBH,CAAAA,CAAAA,IACnC,CACL,IAAA,CAAMG,CACN,CAAA,OAAA,CAASH,CACX,CAAA,CAAA,CAGWI,EAAyB,MAAO,CAAE,OAAAC,CAAAA,CAAAA,CAAS,KAAAC,CAAAA,CAAM,CAAe,GAAA,CAC3E,GAAI,CACF,MAAMN,CAAAA,CAAU,MAAMC,IAAAA,CAAK,GAAI,CAAA,UAAA,CAAW,CAAE,OAAA,CAASI,CAAQ,CAAA,OAAQ,CAAC,CAAA,CAEtE,GAAI,CAACL,CACH,CAAA,OAAOM,CAAM,CAAA,cAAA,CAAgB,uCAAuC,CAAA,CAGtE,IAAIC,CAAAA,CAAY,MAAMC,4BAA6BR,CAAAA,CAAAA,CAAQ,IAAK,CAAA,EAAE,CAElE,CAAA,OAAKO,CACHA,GAAAA,CAAAA,CAAY,MAAME,eAAAA,CAAgBT,CAAQ,CAAA,IAAA,CAAK,EAAE,CAAA,CAAA,CAG5C,CACL,IAAA,CAAMA,CAAQ,CAAA,IAAA,CACd,OAASA,CAAAA,CAAAA,CAAQ,OACjB,CAAA,SAAA,CAAWO,CACb,CACF,CAASG,MAAAA,CAAAA,CAAe,CACtB,OAAOJ,CAAM,CAAA,uBAAA,CAAyBI,CAAU,CAAA,OAAO,CACzD,CACF","file":"auth.middleware.js","sourcesContent":["import { Session, User } from \"better-auth/types\";\nimport { Context } from \"elysia\";\nimport { auth } from \"../lib/auth\";\nimport { getSelectedOrganizerByUserId } from \"../services/organization/organizer/get-selected-organizer-byuserid\";\nimport { createOrganizer } from \"../services/organization/organizer/create-organizer\";\n\nexport const userMiddleware = async (c: Context) => {\n  const session = await auth.api.getSession({ headers: c.request.headers });\n\n  if (!session) {\n    c.set.status = 401;\n    return {\n      success: \"error\",\n      message: \"Unauthorized Access: Token is missing\",\n    };\n  }\n\n  return {\n    user: session.user,\n    session: session.session,\n  };\n};\n\nexport const userInfo = (user: User | null, session: Session | null) => {\n  return {\n    user: user,\n    session: session,\n  };\n};\n\nexport const organizationMiddleware = async ({ request, error }: Context) => {\n  try {\n    const session = await auth.api.getSession({ headers: request.headers });\n\n    if (!session) {\n      return error(\"Unauthorized\", \"Unauthorized Access: Token is missing\");\n    }\n\n    let organizer = await getSelectedOrganizerByUserId(session.user.id);\n\n    if (!organizer) {\n      organizer = await createOrganizer(session.user.id);\n    }\n\n    return {\n      user: session.user,\n      session: session.session,\n      organizer: organizer,\n    };\n  } catch (errorBody:any) {\n    return error(\"Internal Server Error\", errorBody.message);\n  }\n};\n"]}