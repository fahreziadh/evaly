{"version":3,"sources":["../../../../src/lib/db/schema/organization.ts"],"names":["organization","pgTable","varchar","ulid","timestamp","sql","table","index","organizer","foreignKey","user","organizationRelations","relations","many","organizerRelations","one"],"mappings":"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","file":"organization.js","sourcesContent":["import {\n  foreignKey,\n  index,\n  pgTable,\n  timestamp,\n  varchar,\n} from \"drizzle-orm/pg-core\";\nimport { user } from \"./user\";\nimport { relations, sql } from \"drizzle-orm\";\nimport { ulid } from \"ulidx\";\n\n// Organization\nexport const organization = pgTable(\n  \"organization\",\n  {\n    id: varchar(\"id\", { length: 255 })\n      .primaryKey()\n      .$defaultFn(() => \"orgs-\" + ulid()),\n    name: varchar(\"name\", { length: 255 }).notNull(),\n    logoUrl: varchar(\"logo_url\", { length: 255 }),\n    type: varchar(\"type\", {\n      length: 50,\n      enum: [\"school\", \"company\", \"other\"],\n    }).default(\"other\"),\n    createdAt: timestamp(\"created_at\", {\n      mode: \"string\",\n      withTimezone: true,\n    })\n      .notNull()\n      .default(sql`CURRENT_TIMESTAMP`),\n    updatedAt: timestamp(\"updated_at\", {\n      mode: \"string\",\n      withTimezone: true,\n    })\n      .notNull()\n      .default(sql`CURRENT_TIMESTAMP`)\n      .$onUpdate(() => new Date().toISOString()),\n    deletedAt: timestamp(\"deleted_at\", {\n      mode: \"string\",\n      withTimezone: true,\n    }),\n  },\n  (table) => ({\n    organizationId: index(\"organization_id_idx\").on(table.id),\n  })\n);\n\n// Organizer\nexport const organizer = pgTable(\n  \"organizer\",\n  {\n    id: varchar(\"id\", { length: 255 })\n      .primaryKey()\n      .$defaultFn(() => \"org-\" + ulid()),\n    userId: varchar(\"user_id\", { length: 255 }).notNull(),\n    organizationId: varchar(\"organization_id\", { length: 255 }).notNull(),\n    level: varchar(\"level\", { length: 10, enum: [\"owner\", \"admin\"] }).notNull(),\n    organizationRole: varchar(\"organizationRole\", {\n      length: 100,\n      enum: [\"teacher\", \"hr\", \"admin\", \"other\"],\n    }).default(\"other\"),\n    createdAt: timestamp(\"created_at\", {\n      mode: \"string\",\n      withTimezone: true,\n    })\n      .notNull()\n      .default(sql`CURRENT_TIMESTAMP`),\n    updatedAt: timestamp(\"updated_at\", {\n      mode: \"string\",\n      withTimezone: true,\n    })\n      .notNull()\n      .default(sql`CURRENT_TIMESTAMP`)\n      .$onUpdate(() => new Date().toISOString()),\n    deletedAt: timestamp(\"deleted_at\", {\n      mode: \"string\",\n      withTimezone: true,\n    }),\n  },\n  (table) => ({\n    organizerIdIdx: index(\"organizer_id_idx\").on(table.id),\n    userFk: foreignKey({\n      columns: [table.userId],\n      foreignColumns: [user.id],\n      name: \"organizer_user_fk\",\n    }).onDelete(\"cascade\"),\n    organizationFk: foreignKey({\n      columns: [table.organizationId],\n      foreignColumns: [organization.id],\n      name: \"organizer_organization_fk\",\n    }).onDelete(\"cascade\"),\n  })\n);\n\n// Relations\nexport const organizationRelations = relations(organization, ({ many }) => ({\n  organizers: many(organizer),\n}));\n\nexport const organizerRelations = relations(organizer, ({ one }) => ({\n  user: one(user, {\n    fields: [organizer.userId],\n    references: [user.id],\n  }),\n  organization: one(organization, {\n    fields: [organizer.organizationId],\n    references: [organization.id],\n  }),\n}));\n\nexport type Organizer = typeof organizer.$inferSelect & {\n  organization: typeof organization.$inferSelect;\n};\n"]}