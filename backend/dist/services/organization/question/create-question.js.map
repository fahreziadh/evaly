{"version":3,"sources":["../../../../src/services/organization/question/create-question.ts"],"names":["createQuestion","listQuestion","db","tx","listQuestionWithOptions","item","insertedQuestion","question","newQuestionId","sql","and","ne","gte","eq"],"mappings":"yHAKA,eAAsBA,CAAAA,CACpBC,CACA,CAAA,CACA,OAAO,MAAMC,CAAG,CAAA,WAAA,CAAY,MAAOC,CAAAA,EAAO,CACxC,MAAMC,CAAAA,CAAsC,EAAC,CAC7C,IAAWC,MAAAA,CAAAA,IAAQJ,CAAc,CAAA,CAQ/B,MAAMK,CAAAA,CAAAA,CAPoB,MAAMH,CAAAA,CAC7B,MAAOI,CAAAA,QAAQ,EACf,MAAO,CAAA,CACN,GAAGF,CAAAA,CACH,UAAYA,CAAAA,CAAAA,CAAK,IAAS,GAAA,aAAA,CAAgB,CAAI,CAAA,MAChD,CAAC,CAAA,CACA,SAAU,EAAA,EAC8B,GAAG,CAAC,CAAA,CAE/C,GAAI,CAACC,CACH,CAAA,MAAM,IAAI,KAAA,CAAM,2BAA2B,CAAA,CAG7C,MAAME,CAAAA,CAAgBF,CAAiB,CAAA,EAAA,CAGvC,MAAMH,CACH,CAAA,MAAA,CAAOI,QAAQ,CAAA,CACf,GAAI,CAAA,CACH,KAAOE,CAAAA,GAAAA,CAAAA,EAAMF,QAAS,CAAA,KAAK,CAC7B,EAAA,CAAA,CAAC,CACA,CAAA,KAAA,CACCG,IACEC,EAAGJ,CAAAA,QAAAA,CAAS,EAAIC,CAAAA,CAAa,CAC7BI,CAAAA,GAAAA,CAAIL,QAAS,CAAA,KAAA,CAAOF,CAAK,CAAA,KAAA,EAAS,CAAC,CAAA,CACnCQ,EAAGN,CAAAA,QAAAA,CAAS,WAAaF,CAAAA,CAAAA,CAAK,WAAW,CAC3C,CACF,CAAA,CAEFD,CAAwB,CAAA,IAAA,CAAKE,CAAgB,EAC/C,CAEA,OAAOF,CACT,CAAC,CACH","file":"create-question.js","sourcesContent":["import db from \"../../../lib/db\";\nimport { question } from \"../../../lib/db/schema\";\nimport { and, eq, gte, ne, sql } from \"drizzle-orm\";\nimport { InsertQuestion, Question } from \"../../../types/question\";\n\nexport async function createQuestion(\n  listQuestion: InsertQuestion[]\n) {\n  return await db.transaction(async (tx) => {\n    const listQuestionWithOptions: Question[] = [];\n    for (const item of listQuestion) {\n      const insertNewQuestion = await tx\n        .insert(question)\n        .values({\n          ...item,\n          pointValue: item.type === \"point-based\" ? 5 : undefined,\n        })\n        .returning();\n      const insertedQuestion = insertNewQuestion.at(0);\n\n      if (!insertedQuestion) {\n        throw new Error(\"Failed to create question\");\n      }\n\n      const newQuestionId = insertedQuestion.id;\n\n      //update order of other question\n      await tx\n        .update(question)\n        .set({\n          order: sql`${question.order}+1`,\n        })\n        .where(\n          and(\n            ne(question.id, newQuestionId),\n            gte(question.order, item.order || 1),\n            eq(question.referenceId, item.referenceId)\n          )\n        );\n\n      listQuestionWithOptions.push(insertedQuestion);\n    }\n\n    return listQuestionWithOptions;\n  });\n}"]}