{"version":3,"sources":["../../../../src/lib/db/schema/test.session.ts"],"names":["testSession","pgTable","varchar","ulid","smallint","timestamp","sql","testSessionRelation","relations","many","question"],"mappings":"8KAKaA,CAAcC,CAAAA,OAAAA,CAAQ,cAAgB,CAAA,CACjD,GAAIC,OAAQ,CAAA,IAAA,CAAM,CAAE,MAAA,CAAQ,GAAI,CAAC,CAAA,CAC9B,UAAW,EAAA,CACX,UAAW,CAAA,IAAM,KAAQC,CAAAA,IAAAA,EAAM,CAClC,CAAA,KAAA,CAAOD,OAAQ,CAAA,OAAA,CAAS,CAAE,MAAQ,CAAA,GAAI,CAAC,CAAA,CACvC,SAAUE,QAAS,CAAA,UAAU,CAAE,CAAA,OAAA,CAAQ,CAAC,CAAA,CACxC,KAAOA,CAAAA,QAAAA,CAAS,OAAO,CACvB,CAAA,MAAA,CAAQF,OAAQ,CAAA,SAAA,CAAW,CAAE,MAAQ,CAAA,GAAI,CAAC,CAAA,CAAE,SAC5C,CAAA,WAAA,CAAaA,OAAQ,CAAA,aAAA,CAAe,CAAE,MAAA,CAAQ,GAAK,CAAC,EACpD,SAAWG,CAAAA,SAAAA,CAAU,YAAc,CAAA,CACjC,KAAM,QACN,CAAA,YAAA,CAAc,IAChB,CAAC,EACE,OAAQ,EAAA,CACR,OAAQC,CAAAA,GAAAA,CAAAA,iBAAAA,CAAsB,CACjC,CAAA,SAAA,CAAWD,SAAU,CAAA,YAAA,CAAc,CACjC,IAAM,CAAA,QAAA,CACN,YAAc,CAAA,IAChB,CAAC,CACE,CAAA,OAAA,EACA,CAAA,OAAA,CAAQC,sBAAsB,CAC9B,CAAA,SAAA,CAAU,IAAM,IAAI,IAAK,EAAA,CAAE,WAAY,EAAC,EAC3C,SAAWD,CAAAA,SAAAA,CAAU,YAAc,CAAA,CACjC,KAAM,QACN,CAAA,YAAA,CAAc,IAChB,CAAC,CACH,CAAC,CAAA,CAGYE,CAAsBC,CAAAA,SAAAA,CAAUR,CAAa,CAAA,CAAC,CAAE,IAAA,CAAAS,CAAK,CAAO,IAAA,CACvE,QAAUA,CAAAA,CAAAA,CAAKC,SAAU,CAAE,YAAA,CAAc,sBAAuB,CAAC,CACnE,CAAE,CAAA","file":"test.session.js","sourcesContent":["import { relations, sql } from \"drizzle-orm\";\nimport { smallint, pgTable, varchar, timestamp } from \"drizzle-orm/pg-core\";\nimport { ulid } from \"ulidx\";\nimport { question } from \"./question\";\n\nexport const testSession = pgTable(\"test-session\", {\n  id: varchar(\"id\", { length: 255 })\n    .primaryKey()\n    .$defaultFn(() => \"ss-\" + ulid()),\n  title: varchar(\"title\", { length: 255 }),\n  duration: smallint(\"duration\").default(0),\n  order: smallint(\"order\"),\n  testId: varchar(\"test_id\", { length: 255 }).notNull(),\n  description: varchar(\"description\", { length: 1000 }),\n  createdAt: timestamp(\"created_at\", {\n    mode: \"string\",\n    withTimezone: true,\n  })\n    .notNull()\n    .default(sql`CURRENT_TIMESTAMP`),\n  updatedAt: timestamp(\"updated_at\", {\n    mode: \"string\",\n    withTimezone: true,\n  })\n    .notNull()\n    .default(sql`CURRENT_TIMESTAMP`)\n    .$onUpdate(() => new Date().toISOString()),\n  deletedAt: timestamp(\"deleted_at\", {\n    mode: \"string\",\n    withTimezone: true,\n  }),\n});\n\n//Relations\nexport const testSessionRelation = relations(testSession, ({ many }) => ({\n  question: many(question, { relationName: \"testSession.question\" }),\n}));\n\n\n// Types\nexport type TestSession = typeof testSession.$inferSelect;\nexport type NewTestSession = typeof testSession.$inferInsert;\nexport type UpdateTestSession = Partial<NewTestSession>;"]}