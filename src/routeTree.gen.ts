/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as participantRouteImport } from './routes/(participant)/route'
import { Route as IndexImport } from './routes/index'
import { Route as organizerAppRouteImport } from './routes/(organizer)/app/route'
import { Route as organizerAppIndexImport } from './routes/(organizer)/app/index'
import { Route as organizerAppSettingsImport } from './routes/(organizer)/app/settings'
import { Route as organizerAppParticipantsImport } from './routes/(organizer)/app/participants'
import { Route as participantSTestIdIndexImport } from './routes/(participant)/s.$testId.index'
import { Route as organizerAppTestsIndexImport } from './routes/(organizer)/app/tests/index'
import { Route as organizerAppQuestionsIndexImport } from './routes/(organizer)/app/questions/index'
import { Route as participantSTestIdAttemptIdImport } from './routes/(participant)/s.$testId.$attemptId'
import { Route as organizerAppTestsDetailsImport } from './routes/(organizer)/app/tests/details'
import { Route as organizerAppQuestionsTemplateImport } from './routes/(organizer)/app/questions/template'
import { Route as organizerAppQuestionsDetailsImport } from './routes/(organizer)/app/questions/details'

// Create/Update Routes

const participantRouteRoute = participantRouteImport.update({
  id: '/(participant)',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const organizerAppRouteRoute = organizerAppRouteImport.update({
  id: '/(organizer)/app',
  path: '/app',
  getParentRoute: () => rootRoute,
} as any)

const organizerAppIndexRoute = organizerAppIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => organizerAppRouteRoute,
} as any)

const organizerAppSettingsRoute = organizerAppSettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => organizerAppRouteRoute,
} as any)

const organizerAppParticipantsRoute = organizerAppParticipantsImport.update({
  id: '/participants',
  path: '/participants',
  getParentRoute: () => organizerAppRouteRoute,
} as any)

const participantSTestIdIndexRoute = participantSTestIdIndexImport.update({
  id: '/s/$testId/',
  path: '/s/$testId/',
  getParentRoute: () => participantRouteRoute,
} as any)

const organizerAppTestsIndexRoute = organizerAppTestsIndexImport.update({
  id: '/tests/',
  path: '/tests/',
  getParentRoute: () => organizerAppRouteRoute,
} as any)

const organizerAppQuestionsIndexRoute = organizerAppQuestionsIndexImport.update(
  {
    id: '/questions/',
    path: '/questions/',
    getParentRoute: () => organizerAppRouteRoute,
  } as any,
)

const participantSTestIdAttemptIdRoute =
  participantSTestIdAttemptIdImport.update({
    id: '/s/$testId/$attemptId',
    path: '/s/$testId/$attemptId',
    getParentRoute: () => participantRouteRoute,
  } as any)

const organizerAppTestsDetailsRoute = organizerAppTestsDetailsImport.update({
  id: '/tests/details',
  path: '/tests/details',
  getParentRoute: () => organizerAppRouteRoute,
} as any)

const organizerAppQuestionsTemplateRoute =
  organizerAppQuestionsTemplateImport.update({
    id: '/questions/template',
    path: '/questions/template',
    getParentRoute: () => organizerAppRouteRoute,
  } as any)

const organizerAppQuestionsDetailsRoute =
  organizerAppQuestionsDetailsImport.update({
    id: '/questions/details',
    path: '/questions/details',
    getParentRoute: () => organizerAppRouteRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/(participant)': {
      id: '/(participant)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof participantRouteImport
      parentRoute: typeof rootRoute
    }
    '/(organizer)/app': {
      id: '/(organizer)/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof organizerAppRouteImport
      parentRoute: typeof rootRoute
    }
    '/(organizer)/app/participants': {
      id: '/(organizer)/app/participants'
      path: '/participants'
      fullPath: '/app/participants'
      preLoaderRoute: typeof organizerAppParticipantsImport
      parentRoute: typeof organizerAppRouteImport
    }
    '/(organizer)/app/settings': {
      id: '/(organizer)/app/settings'
      path: '/settings'
      fullPath: '/app/settings'
      preLoaderRoute: typeof organizerAppSettingsImport
      parentRoute: typeof organizerAppRouteImport
    }
    '/(organizer)/app/': {
      id: '/(organizer)/app/'
      path: '/'
      fullPath: '/app/'
      preLoaderRoute: typeof organizerAppIndexImport
      parentRoute: typeof organizerAppRouteImport
    }
    '/(organizer)/app/questions/details': {
      id: '/(organizer)/app/questions/details'
      path: '/questions/details'
      fullPath: '/app/questions/details'
      preLoaderRoute: typeof organizerAppQuestionsDetailsImport
      parentRoute: typeof organizerAppRouteImport
    }
    '/(organizer)/app/questions/template': {
      id: '/(organizer)/app/questions/template'
      path: '/questions/template'
      fullPath: '/app/questions/template'
      preLoaderRoute: typeof organizerAppQuestionsTemplateImport
      parentRoute: typeof organizerAppRouteImport
    }
    '/(organizer)/app/tests/details': {
      id: '/(organizer)/app/tests/details'
      path: '/tests/details'
      fullPath: '/app/tests/details'
      preLoaderRoute: typeof organizerAppTestsDetailsImport
      parentRoute: typeof organizerAppRouteImport
    }
    '/(participant)/s/$testId/$attemptId': {
      id: '/(participant)/s/$testId/$attemptId'
      path: '/s/$testId/$attemptId'
      fullPath: '/s/$testId/$attemptId'
      preLoaderRoute: typeof participantSTestIdAttemptIdImport
      parentRoute: typeof participantRouteImport
    }
    '/(organizer)/app/questions/': {
      id: '/(organizer)/app/questions/'
      path: '/questions'
      fullPath: '/app/questions'
      preLoaderRoute: typeof organizerAppQuestionsIndexImport
      parentRoute: typeof organizerAppRouteImport
    }
    '/(organizer)/app/tests/': {
      id: '/(organizer)/app/tests/'
      path: '/tests'
      fullPath: '/app/tests'
      preLoaderRoute: typeof organizerAppTestsIndexImport
      parentRoute: typeof organizerAppRouteImport
    }
    '/(participant)/s/$testId/': {
      id: '/(participant)/s/$testId/'
      path: '/s/$testId'
      fullPath: '/s/$testId'
      preLoaderRoute: typeof participantSTestIdIndexImport
      parentRoute: typeof participantRouteImport
    }
  }
}

// Create and export the route tree

interface participantRouteRouteChildren {
  participantSTestIdAttemptIdRoute: typeof participantSTestIdAttemptIdRoute
  participantSTestIdIndexRoute: typeof participantSTestIdIndexRoute
}

const participantRouteRouteChildren: participantRouteRouteChildren = {
  participantSTestIdAttemptIdRoute: participantSTestIdAttemptIdRoute,
  participantSTestIdIndexRoute: participantSTestIdIndexRoute,
}

const participantRouteRouteWithChildren =
  participantRouteRoute._addFileChildren(participantRouteRouteChildren)

interface organizerAppRouteRouteChildren {
  organizerAppParticipantsRoute: typeof organizerAppParticipantsRoute
  organizerAppSettingsRoute: typeof organizerAppSettingsRoute
  organizerAppIndexRoute: typeof organizerAppIndexRoute
  organizerAppQuestionsDetailsRoute: typeof organizerAppQuestionsDetailsRoute
  organizerAppQuestionsTemplateRoute: typeof organizerAppQuestionsTemplateRoute
  organizerAppTestsDetailsRoute: typeof organizerAppTestsDetailsRoute
  organizerAppQuestionsIndexRoute: typeof organizerAppQuestionsIndexRoute
  organizerAppTestsIndexRoute: typeof organizerAppTestsIndexRoute
}

const organizerAppRouteRouteChildren: organizerAppRouteRouteChildren = {
  organizerAppParticipantsRoute: organizerAppParticipantsRoute,
  organizerAppSettingsRoute: organizerAppSettingsRoute,
  organizerAppIndexRoute: organizerAppIndexRoute,
  organizerAppQuestionsDetailsRoute: organizerAppQuestionsDetailsRoute,
  organizerAppQuestionsTemplateRoute: organizerAppQuestionsTemplateRoute,
  organizerAppTestsDetailsRoute: organizerAppTestsDetailsRoute,
  organizerAppQuestionsIndexRoute: organizerAppQuestionsIndexRoute,
  organizerAppTestsIndexRoute: organizerAppTestsIndexRoute,
}

const organizerAppRouteRouteWithChildren =
  organizerAppRouteRoute._addFileChildren(organizerAppRouteRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof participantRouteRouteWithChildren
  '/app': typeof organizerAppRouteRouteWithChildren
  '/app/participants': typeof organizerAppParticipantsRoute
  '/app/settings': typeof organizerAppSettingsRoute
  '/app/': typeof organizerAppIndexRoute
  '/app/questions/details': typeof organizerAppQuestionsDetailsRoute
  '/app/questions/template': typeof organizerAppQuestionsTemplateRoute
  '/app/tests/details': typeof organizerAppTestsDetailsRoute
  '/s/$testId/$attemptId': typeof participantSTestIdAttemptIdRoute
  '/app/questions': typeof organizerAppQuestionsIndexRoute
  '/app/tests': typeof organizerAppTestsIndexRoute
  '/s/$testId': typeof participantSTestIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof participantRouteRouteWithChildren
  '/app/participants': typeof organizerAppParticipantsRoute
  '/app/settings': typeof organizerAppSettingsRoute
  '/app': typeof organizerAppIndexRoute
  '/app/questions/details': typeof organizerAppQuestionsDetailsRoute
  '/app/questions/template': typeof organizerAppQuestionsTemplateRoute
  '/app/tests/details': typeof organizerAppTestsDetailsRoute
  '/s/$testId/$attemptId': typeof participantSTestIdAttemptIdRoute
  '/app/questions': typeof organizerAppQuestionsIndexRoute
  '/app/tests': typeof organizerAppTestsIndexRoute
  '/s/$testId': typeof participantSTestIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/(participant)': typeof participantRouteRouteWithChildren
  '/(organizer)/app': typeof organizerAppRouteRouteWithChildren
  '/(organizer)/app/participants': typeof organizerAppParticipantsRoute
  '/(organizer)/app/settings': typeof organizerAppSettingsRoute
  '/(organizer)/app/': typeof organizerAppIndexRoute
  '/(organizer)/app/questions/details': typeof organizerAppQuestionsDetailsRoute
  '/(organizer)/app/questions/template': typeof organizerAppQuestionsTemplateRoute
  '/(organizer)/app/tests/details': typeof organizerAppTestsDetailsRoute
  '/(participant)/s/$testId/$attemptId': typeof participantSTestIdAttemptIdRoute
  '/(organizer)/app/questions/': typeof organizerAppQuestionsIndexRoute
  '/(organizer)/app/tests/': typeof organizerAppTestsIndexRoute
  '/(participant)/s/$testId/': typeof participantSTestIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/app'
    | '/app/participants'
    | '/app/settings'
    | '/app/'
    | '/app/questions/details'
    | '/app/questions/template'
    | '/app/tests/details'
    | '/s/$testId/$attemptId'
    | '/app/questions'
    | '/app/tests'
    | '/s/$testId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/app/participants'
    | '/app/settings'
    | '/app'
    | '/app/questions/details'
    | '/app/questions/template'
    | '/app/tests/details'
    | '/s/$testId/$attemptId'
    | '/app/questions'
    | '/app/tests'
    | '/s/$testId'
  id:
    | '__root__'
    | '/'
    | '/(participant)'
    | '/(organizer)/app'
    | '/(organizer)/app/participants'
    | '/(organizer)/app/settings'
    | '/(organizer)/app/'
    | '/(organizer)/app/questions/details'
    | '/(organizer)/app/questions/template'
    | '/(organizer)/app/tests/details'
    | '/(participant)/s/$testId/$attemptId'
    | '/(organizer)/app/questions/'
    | '/(organizer)/app/tests/'
    | '/(participant)/s/$testId/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  participantRouteRoute: typeof participantRouteRouteWithChildren
  organizerAppRouteRoute: typeof organizerAppRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  participantRouteRoute: participantRouteRouteWithChildren,
  organizerAppRouteRoute: organizerAppRouteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/(participant)",
        "/(organizer)/app"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/(participant)": {
      "filePath": "(participant)/route.tsx",
      "children": [
        "/(participant)/s/$testId/$attemptId",
        "/(participant)/s/$testId/"
      ]
    },
    "/(organizer)/app": {
      "filePath": "(organizer)/app/route.tsx",
      "children": [
        "/(organizer)/app/participants",
        "/(organizer)/app/settings",
        "/(organizer)/app/",
        "/(organizer)/app/questions/details",
        "/(organizer)/app/questions/template",
        "/(organizer)/app/tests/details",
        "/(organizer)/app/questions/",
        "/(organizer)/app/tests/"
      ]
    },
    "/(organizer)/app/participants": {
      "filePath": "(organizer)/app/participants.tsx",
      "parent": "/(organizer)/app"
    },
    "/(organizer)/app/settings": {
      "filePath": "(organizer)/app/settings.tsx",
      "parent": "/(organizer)/app"
    },
    "/(organizer)/app/": {
      "filePath": "(organizer)/app/index.tsx",
      "parent": "/(organizer)/app"
    },
    "/(organizer)/app/questions/details": {
      "filePath": "(organizer)/app/questions/details.tsx",
      "parent": "/(organizer)/app"
    },
    "/(organizer)/app/questions/template": {
      "filePath": "(organizer)/app/questions/template.tsx",
      "parent": "/(organizer)/app"
    },
    "/(organizer)/app/tests/details": {
      "filePath": "(organizer)/app/tests/details.tsx",
      "parent": "/(organizer)/app"
    },
    "/(participant)/s/$testId/$attemptId": {
      "filePath": "(participant)/s.$testId.$attemptId.tsx",
      "parent": "/(participant)"
    },
    "/(organizer)/app/questions/": {
      "filePath": "(organizer)/app/questions/index.tsx",
      "parent": "/(organizer)/app"
    },
    "/(organizer)/app/tests/": {
      "filePath": "(organizer)/app/tests/index.tsx",
      "parent": "/(organizer)/app"
    },
    "/(participant)/s/$testId/": {
      "filePath": "(participant)/s.$testId.index.tsx",
      "parent": "/(participant)"
    }
  }
}
ROUTE_MANIFEST_END */
