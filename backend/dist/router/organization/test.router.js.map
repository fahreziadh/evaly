{"version":3,"sources":["../../../src/router/organization/test.router.ts"],"names":["testRouter","Elysia","app","organizationMiddleware","query","organizer","organizationId","getAllTestsByOrganizationId","body","createdByOrganizerId","createNewTest","params","error","testId","data","getTestById","updateTest","createUpdateSchema","test","testSessionRouter"],"mappings":"ujBAUaA,MAAAA,CAAAA,CAAa,IAAIC,CAAAA,EAAS,CAAA,KAAA,CAAM,OAAUC,CAAAA,CAAAA,EAEnDA,CACG,CAAA,MAAA,CAAOC,sBAAsB,CAAA,CAG7B,GACC,CAAA,MAAA,CACA,MAAO,CAAE,KAAAC,CAAAA,CAAAA,CAAO,SAAAC,CAAAA,CAAU,CAAM,GAAA,CAC9B,MAAMC,CAAAA,CAAiBD,CAAU,CAAA,cAAA,CACjC,OAAO,MAAME,2BAA4B,CAAA,CACvC,cAAAD,CAAAA,CAAAA,CACA,IAAMF,CAAAA,CAAAA,CAAM,IACZ,CAAA,KAAA,CAAOA,CAAM,CAAA,KACf,CAAC,CACH,CACA,CAAA,CACE,KAAO,CAAA,CAAA,CAAE,MAAO,CAAA,CACd,IAAM,CAAA,CAAA,CAAE,MAAO,CAAA,CAAE,OAAS,CAAA,CAAE,CAAC,CAAA,CAC7B,KAAO,CAAA,CAAA,CAAE,MAAO,CAAA,CAAE,OAAS,CAAA,EAAG,CAAC,CACjC,CAAC,CACH,CACF,CAAA,CAGC,IACC,CAAA,SAAA,CACA,MAAO,CAAE,IAAAI,CAAAA,CAAAA,CAAM,SAAAH,CAAAA,CAAU,CAAM,GAAA,CAC7B,MAAMI,CAAAA,CAAuBJ,CAAU,CAAA,EAAA,CACjCC,CAAiBD,CAAAA,CAAAA,CAAU,cAEjC,CAAA,OAAO,MAAMK,aAAAA,CAAc,CACzB,oBAAA,CAAAD,CACA,CAAA,cAAA,CAAAH,CACA,CAAA,IAAA,CAAME,CAAK,CAAA,IACb,CAAC,CACH,CACA,CAAA,CACE,IAAM,CAAA,CAAA,CAAE,MAAO,CAAA,CACb,IAAM,CAAA,CAAA,CAAE,SAAU,CAAA,CAAC,MAAQ,CAAA,YAAY,CAAC,CAC1C,CAAC,CACH,CACF,CAAA,CAGC,GACC,CAAA,MAAA,CACA,MAAO,CAAE,MAAAG,CAAAA,CAAAA,CAAQ,SAAAN,CAAAA,CAAAA,CAAW,KAAAO,CAAAA,CAAM,CAAM,GAAA,CACtC,MAAMN,CAAAA,CAAiBD,CAAU,CAAA,cAAA,CAC3BQ,CAASF,CAAAA,CAAAA,CAAO,EAChBG,CAAAA,CAAAA,CAAO,MAAMC,WAAAA,CAAY,CAC7B,cAAA,CAAAT,CACA,CAAA,EAAA,CAAIO,CACN,CAAC,CAED,CAAA,OAAKC,CACIF,EAAAA,CAAAA,CAAM,WAAa,CAAA,gBAAgB,CAI9C,CAAA,CACA,CACE,MAAA,CAAQ,CAAE,CAAA,MAAA,CAAO,CACf,EAAA,CAAI,CAAE,CAAA,MAAA,EACR,CAAC,CACH,CACF,CAGC,CAAA,GAAA,CACC,MACA,CAAA,MAAO,CAAE,MAAA,CAAAD,CAAQ,CAAA,IAAA,CAAAH,CAAM,CAAA,SAAA,CAAAH,CAAU,CAAA,GAAM,CACrC,MAAMC,CAAiBD,CAAAA,CAAAA,CAAU,cAC3BQ,CAAAA,CAAAA,CAASF,CAAO,CAAA,EAAA,CAEtB,OAAO,MAAMK,UAAW,CAAA,CACtB,cAAAV,CAAAA,CAAAA,CACA,EAAIO,CAAAA,CAAAA,CACJ,IAAML,CAAAA,CACR,CAAC,CACH,CACA,CAAA,CACE,MAAQ,CAAA,CAAA,CAAE,MAAO,CAAA,CACf,EAAI,CAAA,CAAA,CAAE,MAAO,EACf,CAAC,CAAA,CACD,IAAMS,CAAAA,kBAAAA,CAAmBC,IAAM,CAAA,EAAE,CACnC,CACF,CAAA,CAEC,GAAIC,CAAAA,iBAAiB,CAE3B","file":"test.router.js","sourcesContent":["import Elysia, { t } from \"elysia\";\nimport { organizationMiddleware } from \"../../middlewares/auth.middleware\";\nimport { getAllTestsByOrganizationId } from \"../../services/organization/test/get-all-tests-by-organization-id\";\nimport { createNewTest } from \"../../services/organization/test/create-new-test\";\nimport { getTestById } from \"../../services/organization/test/get-test-by-id\";\nimport { updateTest } from \"../../services/organization/test/update-test\";\nimport { createUpdateSchema } from \"drizzle-typebox\";\nimport { test } from \"../../lib/db/schema\";\nimport { testSessionRouter } from \"./test.session.router\";\n\nexport const testRouter = new Elysia().group(\"/test\", (app) => {\n  return (\n    app\n      .derive(organizationMiddleware)\n\n      // Get All Tests\n      .get(\n        \"/all\",\n        async ({ query, organizer }) => {\n          const organizationId = organizer.organizationId;\n          return await getAllTestsByOrganizationId({\n            organizationId,\n            page: query.page,\n            limit: query.limit,\n          });\n        },\n        {\n          query: t.Object({\n            page: t.Number({ default: 1 }),\n            limit: t.Number({ default: 20 }),\n          }),\n        }\n      )\n\n      // Create New Test\n      .post(\n        \"/create\",\n        async ({ body, organizer }) => {\n          const createdByOrganizerId = organizer.id;\n          const organizationId = organizer.organizationId;\n\n          return await createNewTest({\n            createdByOrganizerId,\n            organizationId,\n            type: body.type,\n          });\n        },\n        {\n          body: t.Object({\n            type: t.UnionEnum([\"live\", \"self-paced\"]),\n          }),\n        }\n      )\n\n      // Get Test By Id\n      .get(\n        \"/:id\",\n        async ({ params, organizer, error }) => {\n          const organizationId = organizer.organizationId;\n          const testId = params.id;\n          const data = await getTestById({\n            organizationId,\n            id: testId,\n          });\n\n          if (!data) {\n            return error(\"Not Found\", \"Test not found\");\n          }\n\n          return data;\n        },\n        {\n          params: t.Object({\n            id: t.String(),\n          }),\n        }\n      )\n\n      // Update Test\n      .put(\n        \"/:id\",\n        async ({ params, body, organizer }) => {\n          const organizationId = organizer.organizationId;\n          const testId = params.id;\n\n          return await updateTest({\n            organizationId,\n            id: testId,\n            data: body,\n          });\n        },\n        {\n          params: t.Object({\n            id: t.String(),\n          }),\n          body: createUpdateSchema(test, {}),\n        }\n      )\n\n      .use(testSessionRouter)\n  );\n});\n"]}