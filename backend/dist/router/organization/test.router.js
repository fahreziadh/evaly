import s,{t}from'elysia';import {organizationMiddleware}from'../../middlewares/auth.middleware';import {getAllTestsByOrganizationId}from'../../services/organization/test/get-all-tests-by-organization-id';import {createNewTest}from'../../services/organization/test/create-new-test';import {getTestById}from'../../services/organization/test/get-test-by-id';import {updateTest}from'../../services/organization/test/update-test';import {createUpdateSchema}from'drizzle-typebox';import {test}from'../../lib/db/schema';import {testSessionRouter}from'./test.session.router';const B=new s().group("/test",d=>d.derive(organizationMiddleware).get("/all",async({query:e,organizer:o})=>{const i=o.organizationId;return await getAllTestsByOrganizationId({organizationId:i,page:e.page,limit:e.limit})},{query:t.Object({page:t.Number({default:1}),limit:t.Number({default:20})})}).post("/create",async({body:e,organizer:o})=>{const i=o.id,a=o.organizationId;return await createNewTest({createdByOrganizerId:i,organizationId:a,type:e.type})},{body:t.Object({type:t.UnionEnum(["live","self-paced"])})}).get("/:id",async({params:e,organizer:o,error:i})=>{const a=o.organizationId,r=e.id,n=await getTestById({organizationId:a,id:r});return n||i("Not Found","Test not found")},{params:t.Object({id:t.String()})}).put("/:id",async({params:e,body:o,organizer:i})=>{const a=i.organizationId,r=e.id;return await updateTest({organizationId:a,id:r,data:o})},{params:t.Object({id:t.String()}),body:createUpdateSchema(test,{})}).use(testSessionRouter));export{B as testRouter};//# sourceMappingURL=test.router.js.map
//# sourceMappingURL=test.router.js.map