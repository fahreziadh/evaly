{"version":3,"sources":["../../../../src/services/organization/test-session/delete-session-by-id.ts"],"names":["deleteSessionById","sessionId","sessionOrder","db","fields","operators","deleteSession","testSession","eq","deleteQuestions","question","sql","and","ne","gte"],"mappings":"qIAIA,eAAsBA,CAAAA,CAAkBC,CAAmB,CAAA,CACzD,MAAMC,CAAgB,CAAA,CAAA,MAAMC,CAAG,CAAA,KAAA,CAAM,YAAY,SAAU,CAAA,CACzD,OAAS,CAAA,CACP,MAAO,IACT,CAAA,CACA,KAAMC,CAAAA,CAAAA,CAAQC,CAAW,CAAA,CACvB,OAAOA,CAAAA,CAAU,GAAGD,CAAO,CAAA,EAAA,CAAIH,CAAS,CAC1C,CACF,CAAC,CAAA,GAAI,KAECK,CAAAA,CAAAA,CAAgB,MAAMH,CACzB,CAAA,MAAA,CAAOI,WAAW,CAAA,CAClB,IAAI,CACH,SAAA,CAAW,IAAI,IAAA,GAAO,WAAY,EAAA,CAClC,KAAO,CAAA,IACT,CAAC,CACA,CAAA,KAAA,CAAMC,EAAGD,CAAAA,WAAAA,CAAY,GAAIN,CAAS,CAAC,CACnC,CAAA,SAAA,EAEGQ,CAAAA,CAAAA,CAAkB,MAAMN,CAAAA,CAC3B,OAAOO,QAAQ,CAAA,CACf,GAAI,CAAA,CACH,UAAW,IAAI,IAAA,EAAO,CAAA,WAAA,EACxB,CAAC,CAAA,CACA,KAAMF,CAAAA,EAAAA,CAAGE,SAAS,WAAaT,CAAAA,CAAS,CAAC,CAAA,CACzC,WAGH,CAAA,OAAIK,CAAc,CAAA,CAAC,GAAKJ,CACtB,EAAA,MAAMC,CACH,CAAA,MAAA,CAAOI,WAAW,CAClB,CAAA,GAAA,CAAI,CACH,KAAA,CAAOI,GAAMJ,CAAAA,EAAAA,WAAAA,CAAY,KAAK,CAAA,IAAA,CAChC,CAAC,CACA,CAAA,KAAA,CACCK,GACEJ,CAAAA,EAAAA,CAAGD,YAAY,MAAQD,CAAAA,CAAAA,CAAc,CAAC,CAAA,CAAE,MAAM,CAC9CO,CAAAA,EAAAA,CAAGN,WAAY,CAAA,EAAA,CAAIN,CAAS,CAC5Ba,CAAAA,GAAAA,CAAIP,WAAY,CAAA,KAAA,CAAOL,CAAY,CACrC,CACF,CAGG,CAAA,CACL,kBAAmBI,CAAc,CAAA,MAAA,CACjC,kBAAoBG,CAAAA,CAAAA,CAAgB,MACtC,CACF","file":"delete-session-by-id.js","sourcesContent":["import db from \"../../../lib/db\";\nimport { question, testSession } from \"../../../lib/db/schema\";\nimport { and, eq, gte, ne, sql } from \"drizzle-orm\";\n\nexport async function deleteSessionById(sessionId: string) {\n  const sessionOrder = (await db.query.testSession.findFirst({\n    columns: {\n      order: true,\n    },\n    where(fields, operators) {\n      return operators.eq(fields.id, sessionId);\n    },\n  }))?.order;\n\n  const deleteSession = await db\n    .update(testSession)\n    .set({\n      deletedAt: new Date().toISOString(),\n      order: null,\n    })\n    .where(eq(testSession.id, sessionId))\n    .returning();\n\n  const deleteQuestions = await db\n    .update(question)\n    .set({\n      deletedAt: new Date().toISOString(),\n    })\n    .where(eq(question.referenceId, sessionId))\n    .returning();\n\n  // Change the order of the sessions\n  if (deleteSession[0] && sessionOrder) {\n    await db\n      .update(testSession)\n      .set({\n        order: sql`${testSession.order} - 1`,\n      })\n      .where(\n        and(\n          eq(testSession.testId, deleteSession[0].testId),\n          ne(testSession.id, sessionId),\n          gte(testSession.order, sessionOrder)\n        )\n      );\n  }\n\n  return {\n    sessionRowChanges: deleteSession.length,\n    questionRowChanges: deleteQuestions.length,\n  };\n}\n"]}