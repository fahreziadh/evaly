{"version":3,"sources":["../../../../src/lib/db/schema/user.ts"],"names":["user","pgTable","varchar","boolean","timestamp","sql","table","index","userRelations","relations","many","one","session","account","organizer","sessionRelations","text","accountRelations","verification"],"mappings":"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","file":"user.js","sourcesContent":["import {\n  pgTable,\n  varchar,\n  boolean,\n  timestamp,\n  index,\n  text,\n} from \"drizzle-orm/pg-core\";\nimport { sql, relations } from \"drizzle-orm\";\nimport { organizer } from \"./organization\";\n\nexport const user = pgTable(\n  \"user\",\n  {\n    id: varchar(\"id\", { length: 255 }).primaryKey(),\n    name: varchar(\"name\", { length: 255 }).notNull(),\n    email: varchar(\"email\", { length: 255 }).notNull(),\n    emailVerified: boolean(\"email_verified\").notNull().default(false),\n    image: varchar(\"image\", { length: 255 }),\n    selectedOrganizerId: varchar(\"selected_organizer_id\", {length: 255}),\n    createdAt: timestamp(\"created_at\", {\n      mode:\"string\",\n      withTimezone: true\n    })\n      .notNull()\n      .default(sql`CURRENT_TIMESTAMP`),\n    updatedAt: timestamp(\"updated_at\", {\n      mode:\"string\",\n      withTimezone: true\n    })\n      .notNull()\n      .default(sql`CURRENT_TIMESTAMP`)\n     .$onUpdate(() => new Date().toISOString()),\n  },\n  (table) => ({\n    emailIdx: index(\"email_idx\").on(table.email),\n  })\n);\n\nexport const userRelations = relations(user, ({ many,one }) => ({\n  sessions: many(session),\n  accounts: many(account),\n  organizer: many(organizer),\n  selectedOrganizer: one(organizer, {\n    fields: [user.selectedOrganizerId],\n    references: [organizer.id]\n  })\n}));\n\nexport const session = pgTable(\n  \"session\",\n  {\n    id: varchar(\"id\", { length: 255 }).primaryKey(),\n    userId: varchar(\"user_id\", { length: 255 }).notNull(),\n    token: varchar(\"token\", { length: 255 }).notNull(),\n    expiresAt: timestamp(\"expires_at\").notNull(),\n    ipAddress: varchar(\"ip_address\", { length: 255 }),\n    userAgent: varchar(\"user_agent\", { length: 255 }),\n    createdAt: timestamp(\"created_at\", {\n      mode:\"string\",\n      withTimezone: true\n    })\n      .notNull()\n      .default(sql`CURRENT_TIMESTAMP`),\n    updatedAt: timestamp(\"updated_at\", {\n      mode:\"string\",\n      withTimezone: true\n    })\n      .notNull()\n      .default(sql`CURRENT_TIMESTAMP`)\n     .$onUpdate(() => new Date().toISOString()),\n  },\n  (table) => ({\n    userIdIdx: index(\"user_id_idx\").on(table.userId),\n  })\n);\n\nexport const sessionRelations = relations(session, ({ one }) => ({\n  user: one(user, {\n    fields: [session.userId],\n    references: [user.id],\n  }),\n}));\n\nexport const account = pgTable(\n  \"account\",\n  {\n    id: varchar(\"id\", { length: 255 }).primaryKey(),\n    userId: varchar(\"user_id\", { length: 255 }).notNull(),\n    accountId: varchar(\"account_id\", { length: 255 }).notNull(),\n    providerId: varchar(\"provider_id\", { length: 255 }).notNull(),\n    accessToken: text(\"access_token\"),\n    refreshToken: text(\"refresh_token\"),\n    accessTokenExpiresAt: timestamp(\"access_token_expires_at\"),\n    refreshTokenExpiresAt: timestamp(\"refresh_token_expires_at\"),\n    scope: varchar(\"scope\", { length: 255 }),\n    idToken: text(\"id_token\"),\n    password: varchar(\"password\", { length: 255 }),\n    createdAt: timestamp(\"created_at\", {\n      mode:\"string\",\n      withTimezone: true\n    })\n      .notNull()\n      .default(sql`CURRENT_TIMESTAMP`),\n    updatedAt: timestamp(\"updated_at\", {\n      mode:\"string\",\n      withTimezone: true\n    })\n      .notNull()\n      .default(sql`CURRENT_TIMESTAMP`)\n     .$onUpdate(() => new Date().toISOString()),\n  },\n  (table) => ({\n    userIdIdx: index(\"user_account_id_idx\").on(table.userId),\n    providerIdx: index(\"provider_idx\").on(table.providerId),\n  })\n);\n\nexport const accountRelations = relations(account, ({ one }) => ({\n  user: one(user, {\n    fields: [account.userId],\n    references: [user.id],\n  }),\n}));\n\nexport const verification = pgTable(\n  \"verification\",\n  {\n    id: varchar(\"id\", { length: 255 }).primaryKey(),\n    identifier: varchar(\"identifier\", { length: 255 }).notNull(),\n    value: text(\"value\").notNull(),\n    expiresAt: timestamp(\"expires_at\").notNull(),\n    createdAt: timestamp(\"created_at\", {\n      mode:\"string\",\n      withTimezone: true\n    })\n      .notNull()\n      .default(sql`CURRENT_TIMESTAMP`),\n    updatedAt: timestamp(\"updated_at\", {\n      mode:\"string\",\n      withTimezone: true\n    })\n      .notNull()\n      .default(sql`CURRENT_TIMESTAMP`)\n     .$onUpdate(() => new Date().toISOString()),\n  },\n  (table) => ({\n    identifierIdx: index(\"identifier_idx\").on(table.identifier),\n  })\n);\n"]}