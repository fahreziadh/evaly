import d,{t}from'elysia';import {organizationMiddleware}from'../../middlewares/auth.middleware';import {createQuestion}from'../../services/organization/question/create-question';import {getAllQuestionByReferenceId}from'../../services/organization/question/get-all-question-by-reference-id';import {updateQuestion}from'../../services/organization/question/update-question';import {deleteQuestion}from'../../services/organization/question/delete-question';import {checkQuestionOwner}from'../../services/organization/question/check-question-owner';import {updateOrderBetweenQuestions}from'../../services/organization/question/update-order-between-questions';import {ValidatedInsertQuestion,ValidatedUpdateQuestion}from'../../types/question';const A=new d().group("/question",n=>n.derive(organizationMiddleware).post("/create",async({body:e,organizer:{organizationId:r},error:a})=>{const o=e.map(s=>({...s,organizationId:r})),i=await createQuestion(o);return i.length!==e.length?a(400,"Failed to create question"):{questions:i}},{body:t.Array(ValidatedInsertQuestion)}).get("/all",async({query:e})=>await getAllQuestionByReferenceId(e.referenceId),{query:t.Object({referenceId:t.String()})}).put("/update/:id",async({body:e,params:r})=>await updateQuestion(r.id,e),{body:ValidatedUpdateQuestion,params:t.Object({id:t.String()})}).delete("/:id",async({params:e})=>(await deleteQuestion(e.id),{message:"Question deleted successfully"}),{params:t.Object({id:t.String()})}).put("/update-order",async({body:e,organizer:{organizationId:r},error:a})=>(await checkQuestionOwner(e.map(i=>i.questionId),r),await updateOrderBetweenQuestions(e)?{message:"Order updated successfully"}:a(400,"Failed to update order")),{body:t.Array(t.Object({questionId:t.String(),order:t.Number()}))}));export{A as questionRouter};//# sourceMappingURL=question.router.js.map
//# sourceMappingURL=question.router.js.map