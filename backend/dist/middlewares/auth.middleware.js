import {auth}from'../lib/auth';import {getSelectedOrganizerByUserId}from'../services/organization/organizer/get-selected-organizer-byuserid';import {createOrganizer}from'../services/organization/organizer/create-organizer';const h=async r=>{const e=await auth.api.getSession({headers:r.request.headers});return e?{user:e.user,session:e.session}:(r.set.status=401,{success:"error",message:"Unauthorized Access: Token is missing"})},l=(r,e)=>({user:r,session:e}),z=async({request:r,error:e})=>{try{const s=await auth.api.getSession({headers:r.headers});if(!s)return e("Unauthorized","Unauthorized Access: Token is missing");let t=await getSelectedOrganizerByUserId(s.user.id);return t||(t=await createOrganizer(s.user.id)),{user:s.user,session:s.session,organizer:t}}catch(s){return e("Internal Server Error",s.message)}};export{z as organizationMiddleware,l as userInfo,h as userMiddleware};//# sourceMappingURL=auth.middleware.js.map
//# sourceMappingURL=auth.middleware.js.map