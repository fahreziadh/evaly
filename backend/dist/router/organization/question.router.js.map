{"version":3,"sources":["../../../src/router/organization/question.router.ts"],"names":["questionRouter","Elysia","app","organizationMiddleware","body","organizationId","error","inputQuestions","question","questions","createQuestion","ValidatedInsertQuestion","query","getAllQuestionByReferenceId","params","updateQuestion","ValidatedUpdateQuestion","deleteQuestion","checkQuestionOwner","updateOrderBetweenQuestions"],"mappings":"kuBAUaA,MAAAA,CAAAA,CAAiB,IAAIC,CAAAA,EAAS,CAAA,KAAA,CAAM,WAAcC,CAAAA,CAAAA,EAE3DA,CACG,CAAA,MAAA,CAAOC,sBAAsB,CAAA,CAG7B,IACC,CAAA,SAAA,CACA,MAAO,CAAE,IAAAC,CAAAA,CAAAA,CAAM,SAAW,CAAA,CAAE,cAAAC,CAAAA,CAAe,EAAG,KAAAC,CAAAA,CAAM,CAAM,GAAA,CACxD,MAAMC,CAAAA,CAAiBH,CAAK,CAAA,GAAA,CAAKI,CAAc,GAAA,CAC7C,GAAGA,CAAAA,CACH,cAAgBH,CAAAA,CAClB,CAAE,CAAA,CAAA,CAEII,CAAY,CAAA,MAAMC,cAAeH,CAAAA,CAAc,CAErD,CAAA,OAAIE,CAAU,CAAA,MAAA,GAAWL,CAAK,CAAA,MAAA,CACrBE,CAAM,CAAA,GAAA,CAAK,2BAA2B,CAAA,CAGxC,CAAE,SAAAG,CAAAA,CAAU,CACrB,CAAA,CACA,CACE,IAAA,CAAM,CAAE,CAAA,KAAA,CAAME,uBAAuB,CACvC,CACF,CAAA,CAGC,GACC,CAAA,MAAA,CACA,MAAO,CAAE,KAAAC,CAAAA,CAAM,CACN,GAAA,MAAMC,2BAA4BD,CAAAA,CAAAA,CAAM,WAAW,CAAA,CAE5D,CACE,KAAA,CAAO,CAAE,CAAA,MAAA,CAAO,CAAE,WAAA,CAAa,EAAE,MAAO,EAAE,CAAC,CAC7C,CACF,CAAA,CAGC,GACC,CAAA,aAAA,CACA,MAAO,CAAE,IAAAR,CAAAA,CAAAA,CAAM,MAAAU,CAAAA,CAAO,IACb,MAAMC,cAAAA,CAAeD,CAAO,CAAA,EAAA,CAAIV,CAAI,CAAA,CAE7C,CACE,IAAA,CAAMY,uBACN,CAAA,MAAA,CAAQ,CAAE,CAAA,MAAA,CAAO,CAAE,EAAA,CAAI,EAAE,MAAO,EAAE,CAAC,CACrC,CACF,CAAA,CAGC,MACC,CAAA,MAAA,CACA,MAAO,CAAE,MAAAF,CAAAA,CAAO,CACd,IAAA,MAAMG,cAAeH,CAAAA,CAAAA,CAAO,EAAE,CAAA,CACvB,CAAE,OAAA,CAAS,+BAAgC,CAAA,CAAA,CAEpD,CACE,MAAA,CAAQ,CAAE,CAAA,MAAA,CAAO,CAAE,EAAA,CAAI,CAAE,CAAA,MAAA,EAAS,CAAC,CACrC,CACF,CAAA,CAGC,GACC,CAAA,eAAA,CACA,MAAO,CAAE,IAAAV,CAAAA,CAAAA,CAAM,SAAW,CAAA,CAAE,cAAAC,CAAAA,CAAe,CAAG,CAAA,KAAA,CAAAC,CAAM,CAAA,IAClD,MAAMY,kBAAAA,CACJd,CAAK,CAAA,GAAA,CAAKI,CAAaA,EAAAA,CAAAA,CAAS,UAAU,CAAA,CAC1CH,CACF,CAAA,CAEkB,MAAMc,2BAAAA,CAA4Bf,CAAI,CAMjD,CAAA,CAAE,OAAS,CAAA,4BAA6B,CAHtCE,CAAAA,CAAAA,CAAM,GAAK,CAAA,wBAAwB,CAK9C,CAAA,CAAA,CACE,IAAM,CAAA,CAAA,CAAE,KACN,CAAA,CAAA,CAAE,MAAO,CAAA,CACP,UAAY,CAAA,CAAA,CAAE,MAAO,EAAA,CACrB,KAAO,CAAA,CAAA,CAAE,MAAO,EAClB,CAAC,CACH,CACF,CACF,CAEL","file":"question.router.js","sourcesContent":["import Elysia, { t } from \"elysia\";\nimport { organizationMiddleware } from \"../../middlewares/auth.middleware\";\nimport { createQuestion } from \"../../services/organization/question/create-question\";\nimport { getAllQuestionByReferenceId } from \"../../services/organization/question/get-all-question-by-reference-id\";\nimport { updateQuestion } from \"../../services/organization/question/update-question\";\nimport { deleteQuestion } from \"../../services/organization/question/delete-question\";\nimport { checkQuestionOwner } from \"../../services/organization/question/check-question-owner\";\nimport { updateOrderBetweenQuestions } from \"../../services/organization/question/update-order-between-questions\";\nimport { ValidatedInsertQuestion, ValidatedUpdateQuestion } from \"../../types/question\";\n\nexport const questionRouter = new Elysia().group(\"/question\", (app) => {\n  return (\n    app\n      .derive(organizationMiddleware)\n\n      // Create Question\n      .post(\n        \"/create\",\n        async ({ body, organizer: { organizationId }, error }) => {\n          const inputQuestions = body.map((question) => ({\n            ...question,\n            organizationId: organizationId,\n          }));\n\n          const questions = await createQuestion(inputQuestions);\n\n          if (questions.length !== body.length) {\n            return error(400, \"Failed to create question\");\n          }\n\n          return { questions };\n        },\n        {\n          body: t.Array(ValidatedInsertQuestion),\n        }\n      )\n\n      // Get All by Reference Id\n      .get(\n        \"/all\",\n        async ({ query }) => {\n          return await getAllQuestionByReferenceId(query.referenceId);\n        },\n        {\n          query: t.Object({ referenceId: t.String() }),\n        }\n      )\n\n      // Update Question\n      .put(\n        \"/update/:id\",\n        async ({ body, params }) => {\n          return await updateQuestion(params.id, body);\n        },\n        {\n          body: ValidatedUpdateQuestion,\n          params: t.Object({ id: t.String() }),\n        }\n      )\n\n      // Delete Question\n      .delete(\n        \"/:id\",\n        async ({ params }) => {\n          await deleteQuestion(params.id);\n          return { message: \"Question deleted successfully\" };\n        },\n        {\n          params: t.Object({ id: t.String() }),\n        }\n      )\n\n      // Update Order between two questions\n      .put(\n        \"/update-order\",\n        async ({ body, organizer: { organizationId }, error }) => {\n          await checkQuestionOwner(\n            body.map((question) => question.questionId),\n            organizationId\n          );\n\n          const isUpdated = await updateOrderBetweenQuestions(body);\n\n          if (!isUpdated) {\n            return error(400, \"Failed to update order\");\n          }\n\n          return { message: \"Order updated successfully\" };\n        },\n        {\n          body: t.Array(\n            t.Object({\n              questionId: t.String(),\n              order: t.Number(),\n            })\n          ),\n        }\n      )\n  );\n});\n"]}