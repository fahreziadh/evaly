import {pgTable,timestamp,varchar,boolean,index,text}from'drizzle-orm/pg-core';import {sql,relations}from'drizzle-orm';import {organizer}from'./organization';const n=pgTable("user",{id:varchar("id",{length:255}).primaryKey(),name:varchar("name",{length:255}).notNull(),email:varchar("email",{length:255}).notNull(),emailVerified:boolean("email_verified").notNull().default(false),image:varchar("image",{length:255}),selectedOrganizerId:varchar("selected_organizer_id",{length:255}),createdAt:timestamp("created_at",{mode:"string",withTimezone:true}).notNull().default(sql`CURRENT_TIMESTAMP`),updatedAt:timestamp("updated_at",{mode:"string",withTimezone:true}).notNull().default(sql`CURRENT_TIMESTAMP`).$onUpdate(()=>new Date().toISOString())},t=>({emailIdx:index("email_idx").on(t.email)})),f=relations(n,({many:t,one:p})=>({sessions:t(u),accounts:t(c),organizer:t(organizer),selectedOrganizer:p(organizer,{fields:[n.selectedOrganizerId],references:[organizer.id]})})),u=pgTable("session",{id:varchar("id",{length:255}).primaryKey(),userId:varchar("user_id",{length:255}).notNull(),token:varchar("token",{length:255}).notNull(),expiresAt:timestamp("expires_at").notNull(),ipAddress:varchar("ip_address",{length:255}),userAgent:varchar("user_agent",{length:255}),createdAt:timestamp("created_at",{mode:"string",withTimezone:true}).notNull().default(sql`CURRENT_TIMESTAMP`),updatedAt:timestamp("updated_at",{mode:"string",withTimezone:true}).notNull().default(sql`CURRENT_TIMESTAMP`).$onUpdate(()=>new Date().toISOString())},t=>({userIdIdx:index("user_id_idx").on(t.userId)})),h=relations(u,({one:t})=>({user:t(n,{fields:[u.userId],references:[n.id]})})),c=pgTable("account",{id:varchar("id",{length:255}).primaryKey(),userId:varchar("user_id",{length:255}).notNull(),accountId:varchar("account_id",{length:255}).notNull(),providerId:varchar("provider_id",{length:255}).notNull(),accessToken:text("access_token"),refreshToken:text("refresh_token"),accessTokenExpiresAt:timestamp("access_token_expires_at"),refreshTokenExpiresAt:timestamp("refresh_token_expires_at"),scope:varchar("scope",{length:255}),idToken:text("id_token"),password:varchar("password",{length:255}),createdAt:timestamp("created_at",{mode:"string",withTimezone:true}).notNull().default(sql`CURRENT_TIMESTAMP`),updatedAt:timestamp("updated_at",{mode:"string",withTimezone:true}).notNull().default(sql`CURRENT_TIMESTAMP`).$onUpdate(()=>new Date().toISOString())},t=>({userIdIdx:index("user_account_id_idx").on(t.userId),providerIdx:index("provider_idx").on(t.providerId)})),I=relations(c,({one:t})=>({user:t(n,{fields:[c.userId],references:[n.id]})})),N=pgTable("verification",{id:varchar("id",{length:255}).primaryKey(),identifier:varchar("identifier",{length:255}).notNull(),value:text("value").notNull(),expiresAt:timestamp("expires_at").notNull(),createdAt:timestamp("created_at",{mode:"string",withTimezone:true}).notNull().default(sql`CURRENT_TIMESTAMP`),updatedAt:timestamp("updated_at",{mode:"string",withTimezone:true}).notNull().default(sql`CURRENT_TIMESTAMP`).$onUpdate(()=>new Date().toISOString())},t=>({identifierIdx:index("identifier_idx").on(t.identifier)}));export{c as account,I as accountRelations,u as session,h as sessionRelations,n as user,f as userRelations,N as verification};//# sourceMappingURL=user.js.map
//# sourceMappingURL=user.js.map