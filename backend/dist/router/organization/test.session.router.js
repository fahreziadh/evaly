import o,{t}from'elysia';import {organizationMiddleware}from'../../middlewares/auth.middleware';import {getAllSessionByTestId}from'../../services/organization/test-session/get-all-session-by-test-id';import {createSession}from'../../services/organization/test-session/create-session';import {createInsertSchema,createUpdateSchema}from'drizzle-typebox';import {testSession}from'../../lib/db/schema';import {deleteSessionById}from'../../services/organization/test-session/delete-session-by-id';import {getSessionById}from'../../services/organization/test-session/get-session-by-id';import {updateSession}from'../../services/organization/test-session/update-session';import {updateOrderSession}from'../../services/organization/test-session/update-order-session';const B=new o().group("/session",r=>r.derive(organizationMiddleware).get("/all",async({query:t})=>await getAllSessionByTestId(t.testId),{query:t.Object({testId:t.String({description:"Test ID is required"})})}).post("/create",async({body:t})=>await createSession(t.testId),{body:t.Pick(createInsertSchema(testSession,{}),["testId"])}).delete("/:id/delete",async({params:t})=>await deleteSessionById(t.id),{params:t.Object({id:t.String({description:"Session ID is required"})})}).get("/:id",async({params:t})=>await getSessionById(t.id),{params:t.Object({id:t.String({description:"Session ID is required"})})}).put("/:id",async({params:t,body:s})=>await updateSession(t.id,s),{params:t.Object({id:t.String()}),body:createUpdateSchema(testSession,{})}).put("/order",async({body:t})=>await updateOrderSession(t.testId,t.order),{body:t.Object({testId:t.String({description:"Test ID is required"}),order:t.Array(t.String({description:"Session ID is required"}))})}));export{B as testSessionRouter};//# sourceMappingURL=test.session.router.js.map
//# sourceMappingURL=test.session.router.js.map