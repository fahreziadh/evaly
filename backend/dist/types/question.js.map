{"version":3,"sources":["../../src/types/question.ts"],"names":["ValidatedInsertQuestion","createInsertSchema","question","ValidatedUpdateQuestion","createUpdateSchema"],"mappings":"4IASO,MAAMA,EAA0BC,kBAAmBC,CAAAA,QAAAA,CAAU,CAClE,OAAS,CAAA,CAAA,CAAE,QACT,CAAA,CAAA,CAAE,SACA,CAAE,CAAA,KAAA,CACA,EAAE,MAAO,CAAA,CACP,GAAI,CAAE,CAAA,MAAA,EACN,CAAA,IAAA,CAAM,EAAE,MAAO,EAAA,CACf,UAAW,CAAE,CAAA,OAAA,GACb,QAAU,CAAA,CAAA,CAAE,QAAS,CAAA,CAAA,CAAE,OAAO,CAAE,MAAA,CAAQ,KAAM,CAAC,CAAC,EAChD,SAAW,CAAA,CAAA,CAAE,QACX,CAAA,CAAA,CAAE,MAAM,CACN,CAAA,CAAE,QAAQ,OAAO,CAAA,CACjB,EAAE,OAAQ,CAAA,OAAO,CACjB,CAAA,CAAA,CAAE,QAAQ,OAAO,CAAA,CACjB,EAAE,OAAQ,CAAA,MAAM,CAClB,CAAC,CACH,CACA,CAAA,UAAA,CAAY,EAAE,QAAS,CAAA,CAAA,CAAE,OAAO,CAAE,OAAA,CAAS,CAAE,CAAC,CAAC,CACjD,CAAC,CACH,CACF,CACF,CACF,CAAC,CAAA,CACYC,EAA0BC,kBAAmBF,CAAAA,QAAAA,CAAU,CAClE,OAAA,CAAS,EAAE,QACT,CAAA,CAAA,CAAE,SACA,CAAE,CAAA,KAAA,CACA,EAAE,MAAO,CAAA,CACP,EAAI,CAAA,CAAA,CAAE,QACN,CAAA,IAAA,CAAM,EAAE,MAAO,EAAA,CACf,UAAW,CAAE,CAAA,OAAA,EACb,CAAA,QAAA,CAAU,EAAE,QAAS,CAAA,CAAA,CAAE,OAAO,CAAE,MAAA,CAAQ,KAAM,CAAC,CAAC,CAChD,CAAA,SAAA,CAAW,EAAE,QACX,CAAA,CAAA,CAAE,MAAM,CACN,CAAA,CAAE,QAAQ,OAAO,CAAA,CACjB,CAAE,CAAA,OAAA,CAAQ,OAAO,CACjB,CAAA,CAAA,CAAE,QAAQ,OAAO,CAAA,CACjB,EAAE,OAAQ,CAAA,MAAM,CAClB,CAAC,CACH,CACA,CAAA,UAAA,CAAY,EAAE,QAAS,CAAA,CAAA,CAAE,OAAO,CAAE,OAAA,CAAS,CAAE,CAAC,CAAC,CACjD,CAAC,CACH,CACF,CACF,CACF,CAAC","file":"question.js","sourcesContent":["import { createInsertSchema, createUpdateSchema } from \"drizzle-typebox\";\nimport { t } from \"elysia\";\nimport { question } from \"../lib/db/schema/question\";\nexport type { QuestionType } from \"./question-types\";\n\nexport type Question = typeof question.$inferSelect;\nexport type InsertQuestion = typeof question.$inferInsert;\nexport type UpdateQuestion = Partial<InsertQuestion>;\n\nexport const ValidatedInsertQuestion = createInsertSchema(question, {\n  options: t.Optional(\n    t.Nullable(\n      t.Array(\n        t.Object({\n          id: t.String(),\n          text: t.String(),\n          isCorrect: t.Boolean(),\n          mediaUrl: t.Optional(t.String({ format: \"uri\" })),\n          mediaType: t.Optional(\n            t.Union([\n              t.Literal(\"image\"),\n              t.Literal(\"video\"),\n              t.Literal(\"audio\"),\n              t.Literal(\"file\"),\n            ])\n          ),\n          pointValue: t.Optional(t.Number({ minimum: 0 })),\n        })\n      )\n    )\n  ),\n});\nexport const ValidatedUpdateQuestion = createUpdateSchema(question, {\n  options: t.Optional(\n    t.Nullable(\n      t.Array(\n        t.Object({\n          id: t.String(),\n          text: t.String(),\n          isCorrect: t.Boolean(),\n          mediaUrl: t.Optional(t.String({ format: \"uri\" })),\n          mediaType: t.Optional(\n            t.Union([\n              t.Literal(\"image\"),\n              t.Literal(\"video\"),\n              t.Literal(\"audio\"),\n              t.Literal(\"file\"),\n            ])\n          ),\n          pointValue: t.Optional(t.Number({ minimum: 0 })),\n        })\n      )\n    )\n  ),\n});\n\n"]}