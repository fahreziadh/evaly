{"version":3,"sources":["../../../src/router/organization/test.session.router.ts"],"names":["testSessionRouter","Elysia","app","organizationMiddleware","query","getAllSessionByTestId","t","body","createSession","createInsertSchema","testSession","params","deleteSessionById","getSessionById","updateSession","createUpdateSchema","updateOrderSession"],"mappings":"uvBAWO,MAAMA,CAAoB,CAAA,IAAIC,CAAO,EAAA,CAAE,KAAM,CAAA,UAAA,CAAaC,CAE7DA,EAAAA,CAAAA,CACG,MAAOC,CAAAA,sBAAsB,CAG7B,CAAA,GAAA,CACC,MACA,CAAA,MAAO,CAAE,KAAA,CAAAC,CAAM,CAAM,GAAA,MAAMC,qBAAsBD,CAAAA,CAAAA,CAAM,MAAM,CAAA,CAC7D,CACE,KAAA,CAAOE,CAAE,CAAA,MAAA,CAAO,CACd,MAAA,CAAQA,CAAE,CAAA,MAAA,CAAO,CACf,WAAA,CAAa,qBACf,CAAC,CACH,CAAC,CACH,CACF,CAGC,CAAA,IAAA,CAAK,SAAW,CAAA,MAAO,CAAE,IAAA,CAAAC,CAAK,CAAA,GAAM,MAAMC,aAAcD,CAAAA,CAAAA,CAAK,MAAM,CAAA,CAAG,CACrE,IAAA,CAAMD,CAAE,CAAA,IAAA,CAAKG,kBAAmBC,CAAAA,WAAAA,CAAa,EAAE,CAAG,CAAA,CAAC,QAAQ,CAAC,CAC9D,CAAC,CAGA,CAAA,MAAA,CACC,aACA,CAAA,MAAO,CAAE,MAAA,CAAAC,CAAO,CAAA,GAAM,MAAMC,iBAAAA,CAAkBD,CAAO,CAAA,EAAE,EACvD,CACE,MAAA,CAAQL,CAAE,CAAA,MAAA,CAAO,CACf,EAAA,CAAIA,CAAE,CAAA,MAAA,CAAO,CACX,WAAA,CAAa,wBACf,CAAC,CACH,CAAC,CACH,CACF,CAGC,CAAA,GAAA,CACC,MACA,CAAA,MAAO,CAAE,MAAA,CAAAK,CAAO,CAAA,GAAM,MAAME,cAAAA,CAAeF,CAAO,CAAA,EAAE,CACpD,CAAA,CACE,OAAQL,CAAE,CAAA,MAAA,CAAO,CACf,EAAA,CAAIA,CAAE,CAAA,MAAA,CAAO,CACX,WAAA,CAAa,wBACf,CAAC,CACH,CAAC,CACH,CACF,CAGC,CAAA,GAAA,CACC,MACA,CAAA,MAAO,CAAE,MAAA,CAAAK,CAAQ,CAAA,IAAA,CAAAJ,CAAK,CAAA,GAAM,MAAMO,aAAAA,CAAcH,CAAO,CAAA,EAAA,CAAIJ,CAAI,CAAA,CAC/D,CACE,MAAQD,CAAAA,CAAAA,CAAE,MAAO,CAAA,CAAE,EAAIA,CAAAA,CAAAA,CAAE,MAAO,EAAE,CAAC,CAAA,CACnC,IAAMS,CAAAA,kBAAAA,CAAmBL,WAAa,CAAA,EAAE,CAC1C,CACF,CAAA,CAGC,GACC,CAAA,QAAA,CACA,MAAO,CAAE,IAAAH,CAAAA,CAAK,CAAM,GAAA,MAAMS,kBAAmBT,CAAAA,CAAAA,CAAK,MAAQA,CAAAA,CAAAA,CAAK,KAAK,CACpE,CAAA,CACE,IAAMD,CAAAA,CAAAA,CAAE,MAAO,CAAA,CACb,MAAQA,CAAAA,CAAAA,CAAE,MAAO,CAAA,CACf,WAAa,CAAA,qBACf,CAAC,CAAA,CACD,KAAOA,CAAAA,CAAAA,CAAE,KAAMA,CAAAA,CAAAA,CAAE,MAAO,CAAA,CACtB,WAAa,CAAA,wBACf,CAAC,CAAC,CACJ,CAAC,CACH,CACF,CAEL","file":"test.session.router.js","sourcesContent":["import Elysia, { t } from \"elysia\";\nimport { organizationMiddleware } from \"../../middlewares/auth.middleware\";\nimport { getAllSessionByTestId } from \"../../services/organization/test-session/get-all-session-by-test-id\";\nimport { createSession } from \"../../services/organization/test-session/create-session\";\nimport { createInsertSchema, createUpdateSchema } from \"drizzle-typebox\";\nimport { testSession } from \"../../lib/db/schema\";\nimport { deleteSessionById } from \"../../services/organization/test-session/delete-session-by-id\";\nimport { getSessionById } from \"../../services/organization/test-session/get-session-by-id\";\nimport { updateSession } from \"../../services/organization/test-session/update-session\";\nimport { updateOrderSession } from \"../../services/organization/test-session/update-order-session\";\n\nexport const testSessionRouter = new Elysia().group(\"/session\", (app) => {\n  return (\n    app\n      .derive(organizationMiddleware)\n\n      // Get All Sessions by Test Id\n      .get(\n        \"/all\",\n        async ({ query }) => await getAllSessionByTestId(query.testId),\n        {\n          query: t.Object({\n            testId: t.String({\n              description: \"Test ID is required\",\n            }),\n          }),\n        }\n      )\n\n      // Create New Session\n      .post(\"/create\", async ({ body }) => await createSession(body.testId), {\n        body: t.Pick(createInsertSchema(testSession, {}), [\"testId\"]),\n      })\n\n      // Delete session\n      .delete(\n        \"/:id/delete\",\n        async ({ params }) => await deleteSessionById(params.id),\n        {\n          params: t.Object({\n            id: t.String({\n              description: \"Session ID is required\",\n            }),\n          }),\n        }\n      )\n\n      // Get Session By Id\n      .get(\n        \"/:id\",\n        async ({ params }) => await getSessionById(params.id),\n        {\n          params: t.Object({\n            id: t.String({\n              description: \"Session ID is required\",\n            }),\n          }),\n        }\n      )\n\n      // Update Session\n      .put(\n        \"/:id\",\n        async ({ params, body }) => await updateSession(params.id, body),\n        {\n          params: t.Object({ id: t.String() }),\n          body: createUpdateSchema(testSession, {}),\n        }\n      )\n\n      // Update Order of Session\n      .put(\n        \"/order\",\n        async ({ body }) => await updateOrderSession(body.testId, body.order),\n        {\n          body: t.Object({\n            testId: t.String({\n              description: \"Test ID is required\",\n            }),\n            order: t.Array(t.String({\n              description: \"Session ID is required\",\n            })),\n          }),\n        }\n      )\n  );\n});\n"]}