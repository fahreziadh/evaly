{"version":3,"sources":["../../../../src/lib/db/schema/question.ts"],"names":["question","pgTable","varchar","ulid","text","smallint","QUESTION_TYPES","jsonb","boolean","timestamp","sql","table","index","textFieldConfig","integer","unique","fillBlankSegment","mediaConfig","MEDIA_TYPES","sliderConfig","matchingPair","matrixConfig","hotspotConfig","codeEditorConfig","dateTimeConfig","formulaConfig","questionRelation","relations","one","many","testSession","textFieldConfigRelation","fillBlankSegmentRelation","mediaConfigRelation","sliderConfigRelation","matchingPairRelation","matrixConfigRelation","hotspotConfigRelation","codeEditorConfigRelation","dateTimeConfigRelation","formulaConfigRelation"],"mappings":"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","file":"question.js","sourcesContent":["import { relations, sql } from \"drizzle-orm\";\nimport {\n  index,\n  pgTable,\n  smallint,\n  text,\n  timestamp,\n  varchar,\n  integer,\n  boolean,\n  jsonb,\n  unique\n} from \"drizzle-orm/pg-core\";\nimport { ulid } from \"ulidx\";\nimport { testSession } from \"./test.session\";\nimport { QUESTION_TYPES } from \"../../../types/question-types\";\nimport { MEDIA_TYPES, MediaType } from \"../../../types/media\";\n\n// Main question table\nexport const question = pgTable(\n  \"question\",\n  {\n    id: varchar(\"id\", { length: 255 })\n      .primaryKey()\n      .$defaultFn(() => \"qst-\" + ulid()),\n    question: text(\"question\"),\n    referenceId: varchar(\"reference_id\", { length: 255 }).notNull(),\n    referenceType: varchar(\"reference_type\", {\n      length: 100,\n      enum: [\"test-session\", \"template\", \"ai-generated\"],\n    })\n      .notNull()\n      .default(\"test-session\"),\n    organizationId: varchar(\"organization_id\", { length: 255 }), // Owner of the question\n    order: smallint(\"order\").default(1).notNull(),\n    type: varchar(\"type\", {\n      length: 20,\n      enum: QUESTION_TYPES,\n    }).default(\"multiple-choice\"),\n    pointValue: smallint(\"point_value\"),\n    options: jsonb(\"options\").$type<\n      {\n        id: string;\n        text: string;\n        isCorrect: boolean;\n        mediaUrl?: string;\n        mediaType?: MediaType;\n        pointValue?: number;\n      }[]\n    >().default([]),\n    allowMultipleAnswers: boolean(\"allow_multiple_answers\").default(false).notNull(),\n    createdAt: timestamp(\"created_at\", {\n      mode: \"string\",\n      withTimezone: true,\n    })\n      .notNull()\n      .default(sql`CURRENT_TIMESTAMP`),\n    updatedAt: timestamp(\"updated_at\", {\n      mode: \"string\",\n      withTimezone: true,\n    })\n      .notNull()\n      .default(sql`CURRENT_TIMESTAMP`)\n      .$onUpdate(() => new Date().toISOString()),\n    deletedAt: timestamp(\"deleted_at\", {\n      mode: \"string\",\n      withTimezone: true,\n    }),\n  },\n  (table) => ({\n    referenceIdIndex: index(\"reference_idx\").on(table.referenceId),\n  })\n);\n\n// Text field configuration (for text-field type questions)\nexport const textFieldConfig = pgTable(\n  \"text_field_config\",\n  {\n    id: varchar(\"id\", { length: 255 })\n      .primaryKey()\n      .$defaultFn(() => \"txt-\" + ulid()),\n    questionId: varchar(\"question_id\", { length: 255 })\n      .notNull()\n      .references(() => question.id, { onDelete: \"cascade\" }),\n    modelAnswer: text(\"model_answer\"),\n    minLength: integer(\"min_length\"),\n    maxLength: integer(\"max_length\"),\n    placeholder: text(\"placeholder\"),\n    createdAt: timestamp(\"created_at\", {\n      mode: \"string\",\n      withTimezone: true,\n    })\n      .notNull()\n      .default(sql`CURRENT_TIMESTAMP`),\n    updatedAt: timestamp(\"updated_at\", {\n      mode: \"string\",\n      withTimezone: true,\n    })\n      .notNull()\n      .default(sql`CURRENT_TIMESTAMP`)\n      .$onUpdate(() => new Date().toISOString()),\n  },\n  (table) => ({\n    questionIdIndex: index(\"textfield_question_idx\").on(table.questionId),\n    uniqueQuestion: unique().on(table.questionId), // One config per question\n  })\n);\n\n// Fill-the-blank segments (for fill-the-blank questions)\nexport const fillBlankSegment = pgTable(\n  \"fill_blank_segment\",\n  {\n    id: varchar(\"id\", { length: 255 })\n      .primaryKey()\n      .$defaultFn(() => \"blk-\" + ulid()),\n    questionId: varchar(\"question_id\", { length: 255 })\n      .notNull()\n      .references(() => question.id, { onDelete: \"cascade\" }),\n    segmentOrder: integer(\"segment_order\").notNull(),\n    segmentText: text(\"segment_text\"),\n    isBlank: boolean(\"is_blank\").notNull(),\n    expectedAnswer: text(\"expected_answer\"),\n    createdAt: timestamp(\"created_at\", {\n      mode: \"string\",\n      withTimezone: true,\n    })\n      .notNull()\n      .default(sql`CURRENT_TIMESTAMP`),\n    updatedAt: timestamp(\"updated_at\", {\n      mode: \"string\",\n      withTimezone: true,\n    })\n      .notNull()\n      .default(sql`CURRENT_TIMESTAMP`)\n      .$onUpdate(() => new Date().toISOString()),\n  },\n  (table) => ({\n    questionIdIndex: index(\"blank_question_idx\").on(table.questionId),\n    orderIndex: index(\"blank_order_idx\").on(\n      table.questionId,\n      table.segmentOrder\n    ),\n  })\n);\n\n// Media response configuration (for audio/video/file upload questions)\nexport const mediaConfig = pgTable(\n  \"media_config\",\n  {\n    id: varchar(\"id\", { length: 255 })\n      .primaryKey()\n      .$defaultFn(() => \"med-\" + ulid()),\n    questionId: varchar(\"question_id\", { length: 255 })\n      .notNull()\n      .references(() => question.id, { onDelete: \"cascade\" }),\n    mediaType: varchar(\"media_type\", {\n      length: 10,\n      enum: MEDIA_TYPES,\n    }).notNull(),\n    maxFileSizeMb: integer(\"max_file_size_mb\"),\n    sampleResponseUrl: text(\"sample_response_url\"),\n    instructions: text(\"instructions\"),\n    createdAt: timestamp(\"created_at\", {\n      mode: \"string\",\n      withTimezone: true,\n    })\n      .notNull()\n      .default(sql`CURRENT_TIMESTAMP`),\n    updatedAt: timestamp(\"updated_at\", {\n      mode: \"string\",\n      withTimezone: true,\n    })\n      .notNull()\n      .default(sql`CURRENT_TIMESTAMP`)\n      .$onUpdate(() => new Date().toISOString()),\n  },\n  (table) => ({\n    questionIdIndex: index(\"media_question_idx\").on(table.questionId),\n    uniqueQuestion: unique().on(table.questionId), // One media config per question\n  })\n);\n\n// Slider configuration (for slider-scale questions)\nexport const sliderConfig = pgTable(\n  \"slider_config\",\n  {\n    id: varchar(\"id\", { length: 255 })\n      .primaryKey()\n      .$defaultFn(() => \"sld-\" + ulid()),\n    questionId: varchar(\"question_id\", { length: 255 })\n      .notNull()\n      .references(() => question.id, { onDelete: \"cascade\" }),\n    minValue: integer(\"min_value\").notNull(),\n    maxValue: integer(\"max_value\").notNull(),\n    step: integer(\"step\").default(1),\n    defaultValue: integer(\"default_value\"),\n    minLabel: text(\"min_label\"),\n    maxLabel: text(\"max_label\"),\n    createdAt: timestamp(\"created_at\", {\n      mode: \"string\",\n      withTimezone: true,\n    })\n      .notNull()\n      .default(sql`CURRENT_TIMESTAMP`),\n    updatedAt: timestamp(\"updated_at\", {\n      mode: \"string\",\n      withTimezone: true,\n    })\n      .notNull()\n      .default(sql`CURRENT_TIMESTAMP`)\n      .$onUpdate(() => new Date().toISOString()),\n  },\n  (table) => ({\n    questionIdIndex: index(\"slider_question_idx\").on(table.questionId),\n    uniqueQuestion: unique().on(table.questionId), // One slider config per question\n  })\n);\n\n// Matching pairs (for matching-pairs questions)\nexport const matchingPair = pgTable(\n  \"matching_pair\",\n  {\n    id: varchar(\"id\", { length: 255 })\n      .primaryKey()\n      .$defaultFn(() => \"mpr-\" + ulid()),\n    questionId: varchar(\"question_id\", { length: 255 })\n      .notNull()\n      .references(() => question.id, { onDelete: \"cascade\" }),\n    leftItem: text(\"left_item\").notNull(),\n    rightItem: text(\"right_item\").notNull(),\n    order: smallint(\"order\"),\n    createdAt: timestamp(\"created_at\", {\n      mode: \"string\",\n      withTimezone: true,\n    })\n      .notNull()\n      .default(sql`CURRENT_TIMESTAMP`),\n    updatedAt: timestamp(\"updated_at\", {\n      mode: \"string\",\n      withTimezone: true,\n    })\n      .notNull()\n      .default(sql`CURRENT_TIMESTAMP`)\n      .$onUpdate(() => new Date().toISOString()),\n  },\n  (table) => ({\n    questionIdIndex: index(\"matching_question_idx\").on(table.questionId),\n  })\n);\n\n// Matrix configuration (for matrix questions)\nexport const matrixConfig = pgTable(\n  \"matrix_config\",\n  {\n    id: varchar(\"id\", { length: 255 })\n      .primaryKey()\n      .$defaultFn(() => \"mtx-\" + ulid()),\n    questionId: varchar(\"question_id\", { length: 255 })\n      .notNull()\n      .references(() => question.id, { onDelete: \"cascade\" }),\n    rows: text(\"rows\").array().notNull(),\n    columns: text(\"columns\").array().notNull(),\n    matrixType: varchar(\"matrix_type\", { length: 20 }).notNull(), // e.g., \"likert\", \"rating\", \"checkboxes\"\n    createdAt: timestamp(\"created_at\", {\n      mode: \"string\",\n      withTimezone: true,\n    })\n      .notNull()\n      .default(sql`CURRENT_TIMESTAMP`),\n    updatedAt: timestamp(\"updated_at\", {\n      mode: \"string\",\n      withTimezone: true,\n    })\n      .notNull()\n      .default(sql`CURRENT_TIMESTAMP`)\n      .$onUpdate(() => new Date().toISOString()),\n  },\n  (table) => ({\n    questionIdIndex: index(\"matrix_question_idx\").on(table.questionId),\n    uniqueQuestion: unique().on(table.questionId), // One matrix config per question\n  })\n);\n\n// Hotspot configuration (for hotspot questions)\nexport const hotspotConfig = pgTable(\n  \"hotspot_config\",\n  {\n    id: varchar(\"id\", { length: 255 })\n      .primaryKey()\n      .$defaultFn(() => \"hsp-\" + ulid()),\n    questionId: varchar(\"question_id\", { length: 255 })\n      .notNull()\n      .references(() => question.id, { onDelete: \"cascade\" }),\n    imageUrl: text(\"image_url\").notNull(),\n    hotspots: jsonb(\"hotspots\").notNull(), // Array of {x, y, width, height, isCorrect, label}\n    createdAt: timestamp(\"created_at\", {\n      mode: \"string\",\n      withTimezone: true,\n    })\n      .notNull()\n      .default(sql`CURRENT_TIMESTAMP`),\n    updatedAt: timestamp(\"updated_at\", {\n      mode: \"string\",\n      withTimezone: true,\n    })\n      .notNull()\n      .default(sql`CURRENT_TIMESTAMP`)\n      .$onUpdate(() => new Date().toISOString()),\n  },\n  (table) => ({\n    questionIdIndex: index(\"hotspot_question_idx\").on(table.questionId),\n    uniqueQuestion: unique().on(table.questionId), // One hotspot config per question\n  })\n);\n\n// Code editor configuration (for code-editor questions)\nexport const codeEditorConfig = pgTable(\n  \"code_editor_config\",\n  {\n    id: varchar(\"id\", { length: 255 })\n      .primaryKey()\n      .$defaultFn(() => \"code-\" + ulid()),\n    questionId: varchar(\"question_id\", { length: 255 })\n      .notNull()\n      .references(() => question.id, { onDelete: \"cascade\" }),\n    language: varchar(\"language\", { length: 50 }).notNull(), // e.g., \"javascript\", \"python\"\n    initialCode: text(\"initial_code\"),\n    solutionCode: text(\"solution_code\"),\n    testCases: jsonb(\"test_cases\"), // Array of test cases to validate code\n    createdAt: timestamp(\"created_at\", {\n      mode: \"string\",\n      withTimezone: true,\n    })\n      .notNull()\n      .default(sql`CURRENT_TIMESTAMP`),\n    updatedAt: timestamp(\"updated_at\", {\n      mode: \"string\",\n      withTimezone: true,\n    })\n      .notNull()\n      .default(sql`CURRENT_TIMESTAMP`)\n      .$onUpdate(() => new Date().toISOString()),\n  },\n  (table) => ({\n    questionIdIndex: index(\"code_question_idx\").on(table.questionId),\n    uniqueQuestion: unique().on(table.questionId), // One code config per question\n  })\n);\n\n// Date-time picker configuration (for date-picker and time-picker questions)\nexport const dateTimeConfig = pgTable(\n  \"date_time_config\",\n  {\n    id: varchar(\"id\", { length: 255 })\n      .primaryKey()\n      .$defaultFn(() => \"dt-\" + ulid()),\n    questionId: varchar(\"question_id\", { length: 255 })\n      .notNull()\n      .references(() => question.id, { onDelete: \"cascade\" }),\n    minDate: timestamp(\"min_date\", { mode: \"string\", withTimezone: true }),\n    maxDate: timestamp(\"max_date\", { mode: \"string\", withTimezone: true }),\n    correctDate: timestamp(\"correct_date\", {\n      mode: \"string\",\n      withTimezone: true,\n    }),\n    format: varchar(\"format\", { length: 50 }), // Format string (e.g., \"YYYY-MM-DD\")\n    allowTimeSelection: boolean(\"allow_time_selection\").default(false),\n    createdAt: timestamp(\"created_at\", {\n      mode: \"string\",\n      withTimezone: true,\n    })\n      .notNull()\n      .default(sql`CURRENT_TIMESTAMP`),\n    updatedAt: timestamp(\"updated_at\", {\n      mode: \"string\",\n      withTimezone: true,\n    })\n      .notNull()\n      .default(sql`CURRENT_TIMESTAMP`)\n      .$onUpdate(() => new Date().toISOString()),\n  },\n  (table) => ({\n    questionIdIndex: index(\"date_question_idx\").on(table.questionId),\n    uniqueQuestion: unique().on(table.questionId), // One date/time config per question\n  })\n);\n\n// Formula configuration (for formula-input questions)\nexport const formulaConfig = pgTable(\n  \"formula_config\",\n  {\n    id: varchar(\"id\", { length: 255 })\n      .primaryKey()\n      .$defaultFn(() => \"frm-\" + ulid()),\n    questionId: varchar(\"question_id\", { length: 255 })\n      .notNull()\n      .references(() => question.id, { onDelete: \"cascade\" }),\n    correctFormula: text(\"correct_formula\"),\n    variables: jsonb(\"variables\"), // Array of allowed variables with descriptions\n    allowedFunctions: text(\"allowed_functions\").array().notNull(),\n    tolerance: text(\"tolerance\"), // For numeric answers, how close is considered correct\n    caseSensitive: boolean(\"case_sensitive\").default(false),\n    createdAt: timestamp(\"created_at\", {\n      mode: \"string\",\n      withTimezone: true,\n    })\n      .notNull()\n      .default(sql`CURRENT_TIMESTAMP`),\n    updatedAt: timestamp(\"updated_at\", {\n      mode: \"string\",\n      withTimezone: true,\n    })\n      .notNull()\n      .default(sql`CURRENT_TIMESTAMP`)\n      .$onUpdate(() => new Date().toISOString()),\n  },\n  (table) => ({\n    questionIdIndex: index(\"formula_question_idx\").on(table.questionId),\n    uniqueQuestion: unique().on(table.questionId), // One formula config per question\n  })\n);\n\n//Relations\nexport const questionRelation = relations(question, ({ one, many }) => ({\n  testSession: one(testSession, {\n    fields: [question.referenceId],\n    references: [testSession.id],\n    relationName: \"testSession.question\",\n  }),\n  textFieldConfig: one(textFieldConfig),\n  fillBlankSegments: many(fillBlankSegment),\n  mediaConfig: one(mediaConfig),\n  sliderConfig: one(sliderConfig),\n  matchingPairs: many(matchingPair),\n  matrixConfig: one(matrixConfig),\n  hotspotConfig: one(hotspotConfig),\n  codeEditorConfig: one(codeEditorConfig),\n  dateTimeConfig: one(dateTimeConfig),\n  formulaConfig: one(formulaConfig),\n}));\n\nexport const textFieldConfigRelation = relations(\n  textFieldConfig,\n  ({ one }) => ({\n    question: one(question, {\n      fields: [textFieldConfig.questionId],\n      references: [question.id],\n      relationName: \"question.textFieldConfig\",\n    }),\n  })\n);\n\nexport const fillBlankSegmentRelation = relations(\n  fillBlankSegment,\n  ({ one }) => ({\n    question: one(question, {\n      fields: [fillBlankSegment.questionId],\n      references: [question.id],\n      relationName: \"question.fillBlankSegments\",\n    }),\n  })\n);\n\nexport const mediaConfigRelation = relations(mediaConfig, ({ one }) => ({\n  question: one(question, {\n    fields: [mediaConfig.questionId],\n    references: [question.id],\n    relationName: \"question.mediaConfig\",\n  }),\n}));\n\nexport const sliderConfigRelation = relations(sliderConfig, ({ one }) => ({\n  question: one(question, {\n    fields: [sliderConfig.questionId],\n    references: [question.id],\n    relationName: \"question.sliderConfig\",\n  }),\n}));\n\nexport const matchingPairRelation = relations(matchingPair, ({ one }) => ({\n  question: one(question, {\n    fields: [matchingPair.questionId],\n    references: [question.id],\n    relationName: \"question.matchingPairs\",\n  }),\n}));\n\nexport const matrixConfigRelation = relations(matrixConfig, ({ one }) => ({\n  question: one(question, {\n    fields: [matrixConfig.questionId],\n    references: [question.id],\n    relationName: \"question.matrixConfig\",\n  }),\n}));\n\nexport const hotspotConfigRelation = relations(hotspotConfig, ({ one }) => ({\n  question: one(question, {\n    fields: [hotspotConfig.questionId],\n    references: [question.id],\n    relationName: \"question.hotspotConfig\",\n  }),\n}));\n\nexport const codeEditorConfigRelation = relations(\n  codeEditorConfig,\n  ({ one }) => ({\n    question: one(question, {\n      fields: [codeEditorConfig.questionId],\n      references: [question.id],\n      relationName: \"question.codeEditorConfig\",\n    }),\n  })\n);\n\nexport const dateTimeConfigRelation = relations(dateTimeConfig, ({ one }) => ({\n  question: one(question, {\n    fields: [dateTimeConfig.questionId],\n    references: [question.id],\n    relationName: \"question.dateTimeConfig\",\n  }),\n}));\n\nexport const formulaConfigRelation = relations(formulaConfig, ({ one }) => ({\n  question: one(question, {\n    fields: [formulaConfig.questionId],\n    references: [question.id],\n    relationName: \"question.formulaConfig\",\n  }),\n}));\n"]}