import l from'../../../lib/db';import {test}from'../../../lib/db/schema';import {eq,isNull,or,like,sql,between,and}from'drizzle-orm';async function C({organizationId:m,sort:p="desc-create",page:i=1,limit:r=10,search:o="",startDate:d,endDate:u}){const f=(i-1)*r,n=[eq(test.organizationId,m),isNull(test.deletedAt)];if(o){const t=or(like(sql`${test.title}`,`%${o}%`),like(sql`${test.description}`,`%${o}%`));n.push(t);}d&&u&&n.push(between(test.heldAt,d.toISOString(),u.toISOString()));const A=await l.query.test.findMany({where:(t,{and:a})=>a(...n),limit:r,offset:f,orderBy:(t,{asc:a,desc:c})=>{switch(p){case "asc-create":return [a(t.createdAt)];case "desc-create":return [c(t.createdAt)];case "asc-held":return [a(t.heldAt)];case "desc-held":return [c(t.heldAt)];default:return [c(t.createdAt)]}}}),[{count:h}]=await l.select({count:sql`count(*)`}).from(test).where(and(...n)),w={total:h,page:i,limit:r,totalPages:Math.ceil(h/r)};return {data:A,pagination:w}}export{C as getAllTestsByOrganizationId};//# sourceMappingURL=get-all-tests-by-organization-id.js.map
//# sourceMappingURL=get-all-tests-by-organization-id.js.map