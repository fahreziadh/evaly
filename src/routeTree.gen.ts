/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UseCasesRouteImport } from './routes/use-cases'
import { Route as PricingRouteImport } from './routes/pricing'
import { Route as participantRouteRouteImport } from './routes/(participant)/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as organizerAppRouteRouteImport } from './routes/(organizer)/app/route'
import { Route as organizerAppIndexRouteImport } from './routes/(organizer)/app/index'
import { Route as organizerAppSettingsRouteImport } from './routes/(organizer)/app/settings'
import { Route as organizerAppParticipantsRouteImport } from './routes/(organizer)/app/participants'
import { Route as participantSTestIdIndexRouteImport } from './routes/(participant)/s.$testId.index'
import { Route as organizerAppTestsIndexRouteImport } from './routes/(organizer)/app/tests/index'
import { Route as organizerAppQuestionsIndexRouteImport } from './routes/(organizer)/app/questions/index'
import { Route as participantSTestIdResultsRouteImport } from './routes/(participant)/s.$testId.results'
import { Route as participantSTestIdAttemptIdRouteImport } from './routes/(participant)/s.$testId.$attemptId'
import { Route as organizerAppTestsDetailsRouteImport } from './routes/(organizer)/app/tests/details'
import { Route as organizerAppQuestionsTemplateRouteImport } from './routes/(organizer)/app/questions/template'
import { Route as organizerAppQuestionsLibraryRouteImport } from './routes/(organizer)/app/questions/library'
import { Route as organizerAppQuestionsDetailsRouteImport } from './routes/(organizer)/app/questions/details'

const UseCasesRoute = UseCasesRouteImport.update({
  id: '/use-cases',
  path: '/use-cases',
  getParentRoute: () => rootRouteImport,
} as any)
const PricingRoute = PricingRouteImport.update({
  id: '/pricing',
  path: '/pricing',
  getParentRoute: () => rootRouteImport,
} as any)
const participantRouteRoute = participantRouteRouteImport.update({
  id: '/(participant)',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const organizerAppRouteRoute = organizerAppRouteRouteImport.update({
  id: '/(organizer)/app',
  path: '/app',
  getParentRoute: () => rootRouteImport,
} as any)
const organizerAppIndexRoute = organizerAppIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => organizerAppRouteRoute,
} as any)
const organizerAppSettingsRoute = organizerAppSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => organizerAppRouteRoute,
} as any)
const organizerAppParticipantsRoute =
  organizerAppParticipantsRouteImport.update({
    id: '/participants',
    path: '/participants',
    getParentRoute: () => organizerAppRouteRoute,
  } as any)
const participantSTestIdIndexRoute = participantSTestIdIndexRouteImport.update({
  id: '/s/$testId/',
  path: '/s/$testId/',
  getParentRoute: () => participantRouteRoute,
} as any)
const organizerAppTestsIndexRoute = organizerAppTestsIndexRouteImport.update({
  id: '/tests/',
  path: '/tests/',
  getParentRoute: () => organizerAppRouteRoute,
} as any)
const organizerAppQuestionsIndexRoute =
  organizerAppQuestionsIndexRouteImport.update({
    id: '/questions/',
    path: '/questions/',
    getParentRoute: () => organizerAppRouteRoute,
  } as any)
const participantSTestIdResultsRoute =
  participantSTestIdResultsRouteImport.update({
    id: '/s/$testId/results',
    path: '/s/$testId/results',
    getParentRoute: () => participantRouteRoute,
  } as any)
const participantSTestIdAttemptIdRoute =
  participantSTestIdAttemptIdRouteImport.update({
    id: '/s/$testId/$attemptId',
    path: '/s/$testId/$attemptId',
    getParentRoute: () => participantRouteRoute,
  } as any)
const organizerAppTestsDetailsRoute =
  organizerAppTestsDetailsRouteImport.update({
    id: '/tests/details',
    path: '/tests/details',
    getParentRoute: () => organizerAppRouteRoute,
  } as any)
const organizerAppQuestionsTemplateRoute =
  organizerAppQuestionsTemplateRouteImport.update({
    id: '/questions/template',
    path: '/questions/template',
    getParentRoute: () => organizerAppRouteRoute,
  } as any)
const organizerAppQuestionsLibraryRoute =
  organizerAppQuestionsLibraryRouteImport.update({
    id: '/questions/library',
    path: '/questions/library',
    getParentRoute: () => organizerAppRouteRoute,
  } as any)
const organizerAppQuestionsDetailsRoute =
  organizerAppQuestionsDetailsRouteImport.update({
    id: '/questions/details',
    path: '/questions/details',
    getParentRoute: () => organizerAppRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof participantRouteRouteWithChildren
  '/pricing': typeof PricingRoute
  '/use-cases': typeof UseCasesRoute
  '/app': typeof organizerAppRouteRouteWithChildren
  '/app/participants': typeof organizerAppParticipantsRoute
  '/app/settings': typeof organizerAppSettingsRoute
  '/app/': typeof organizerAppIndexRoute
  '/app/questions/details': typeof organizerAppQuestionsDetailsRoute
  '/app/questions/library': typeof organizerAppQuestionsLibraryRoute
  '/app/questions/template': typeof organizerAppQuestionsTemplateRoute
  '/app/tests/details': typeof organizerAppTestsDetailsRoute
  '/s/$testId/$attemptId': typeof participantSTestIdAttemptIdRoute
  '/s/$testId/results': typeof participantSTestIdResultsRoute
  '/app/questions': typeof organizerAppQuestionsIndexRoute
  '/app/tests': typeof organizerAppTestsIndexRoute
  '/s/$testId': typeof participantSTestIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof participantRouteRouteWithChildren
  '/pricing': typeof PricingRoute
  '/use-cases': typeof UseCasesRoute
  '/app/participants': typeof organizerAppParticipantsRoute
  '/app/settings': typeof organizerAppSettingsRoute
  '/app': typeof organizerAppIndexRoute
  '/app/questions/details': typeof organizerAppQuestionsDetailsRoute
  '/app/questions/library': typeof organizerAppQuestionsLibraryRoute
  '/app/questions/template': typeof organizerAppQuestionsTemplateRoute
  '/app/tests/details': typeof organizerAppTestsDetailsRoute
  '/s/$testId/$attemptId': typeof participantSTestIdAttemptIdRoute
  '/s/$testId/results': typeof participantSTestIdResultsRoute
  '/app/questions': typeof organizerAppQuestionsIndexRoute
  '/app/tests': typeof organizerAppTestsIndexRoute
  '/s/$testId': typeof participantSTestIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/(participant)': typeof participantRouteRouteWithChildren
  '/pricing': typeof PricingRoute
  '/use-cases': typeof UseCasesRoute
  '/(organizer)/app': typeof organizerAppRouteRouteWithChildren
  '/(organizer)/app/participants': typeof organizerAppParticipantsRoute
  '/(organizer)/app/settings': typeof organizerAppSettingsRoute
  '/(organizer)/app/': typeof organizerAppIndexRoute
  '/(organizer)/app/questions/details': typeof organizerAppQuestionsDetailsRoute
  '/(organizer)/app/questions/library': typeof organizerAppQuestionsLibraryRoute
  '/(organizer)/app/questions/template': typeof organizerAppQuestionsTemplateRoute
  '/(organizer)/app/tests/details': typeof organizerAppTestsDetailsRoute
  '/(participant)/s/$testId/$attemptId': typeof participantSTestIdAttemptIdRoute
  '/(participant)/s/$testId/results': typeof participantSTestIdResultsRoute
  '/(organizer)/app/questions/': typeof organizerAppQuestionsIndexRoute
  '/(organizer)/app/tests/': typeof organizerAppTestsIndexRoute
  '/(participant)/s/$testId/': typeof participantSTestIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/pricing'
    | '/use-cases'
    | '/app'
    | '/app/participants'
    | '/app/settings'
    | '/app/'
    | '/app/questions/details'
    | '/app/questions/library'
    | '/app/questions/template'
    | '/app/tests/details'
    | '/s/$testId/$attemptId'
    | '/s/$testId/results'
    | '/app/questions'
    | '/app/tests'
    | '/s/$testId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/pricing'
    | '/use-cases'
    | '/app/participants'
    | '/app/settings'
    | '/app'
    | '/app/questions/details'
    | '/app/questions/library'
    | '/app/questions/template'
    | '/app/tests/details'
    | '/s/$testId/$attemptId'
    | '/s/$testId/results'
    | '/app/questions'
    | '/app/tests'
    | '/s/$testId'
  id:
    | '__root__'
    | '/'
    | '/(participant)'
    | '/pricing'
    | '/use-cases'
    | '/(organizer)/app'
    | '/(organizer)/app/participants'
    | '/(organizer)/app/settings'
    | '/(organizer)/app/'
    | '/(organizer)/app/questions/details'
    | '/(organizer)/app/questions/library'
    | '/(organizer)/app/questions/template'
    | '/(organizer)/app/tests/details'
    | '/(participant)/s/$testId/$attemptId'
    | '/(participant)/s/$testId/results'
    | '/(organizer)/app/questions/'
    | '/(organizer)/app/tests/'
    | '/(participant)/s/$testId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  participantRouteRoute: typeof participantRouteRouteWithChildren
  PricingRoute: typeof PricingRoute
  UseCasesRoute: typeof UseCasesRoute
  organizerAppRouteRoute: typeof organizerAppRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/use-cases': {
      id: '/use-cases'
      path: '/use-cases'
      fullPath: '/use-cases'
      preLoaderRoute: typeof UseCasesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/pricing': {
      id: '/pricing'
      path: '/pricing'
      fullPath: '/pricing'
      preLoaderRoute: typeof PricingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(participant)': {
      id: '/(participant)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof participantRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(organizer)/app': {
      id: '/(organizer)/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof organizerAppRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(organizer)/app/': {
      id: '/(organizer)/app/'
      path: '/'
      fullPath: '/app/'
      preLoaderRoute: typeof organizerAppIndexRouteImport
      parentRoute: typeof organizerAppRouteRoute
    }
    '/(organizer)/app/settings': {
      id: '/(organizer)/app/settings'
      path: '/settings'
      fullPath: '/app/settings'
      preLoaderRoute: typeof organizerAppSettingsRouteImport
      parentRoute: typeof organizerAppRouteRoute
    }
    '/(organizer)/app/participants': {
      id: '/(organizer)/app/participants'
      path: '/participants'
      fullPath: '/app/participants'
      preLoaderRoute: typeof organizerAppParticipantsRouteImport
      parentRoute: typeof organizerAppRouteRoute
    }
    '/(participant)/s/$testId/': {
      id: '/(participant)/s/$testId/'
      path: '/s/$testId'
      fullPath: '/s/$testId'
      preLoaderRoute: typeof participantSTestIdIndexRouteImport
      parentRoute: typeof participantRouteRoute
    }
    '/(organizer)/app/tests/': {
      id: '/(organizer)/app/tests/'
      path: '/tests'
      fullPath: '/app/tests'
      preLoaderRoute: typeof organizerAppTestsIndexRouteImport
      parentRoute: typeof organizerAppRouteRoute
    }
    '/(organizer)/app/questions/': {
      id: '/(organizer)/app/questions/'
      path: '/questions'
      fullPath: '/app/questions'
      preLoaderRoute: typeof organizerAppQuestionsIndexRouteImport
      parentRoute: typeof organizerAppRouteRoute
    }
    '/(participant)/s/$testId/results': {
      id: '/(participant)/s/$testId/results'
      path: '/s/$testId/results'
      fullPath: '/s/$testId/results'
      preLoaderRoute: typeof participantSTestIdResultsRouteImport
      parentRoute: typeof participantRouteRoute
    }
    '/(participant)/s/$testId/$attemptId': {
      id: '/(participant)/s/$testId/$attemptId'
      path: '/s/$testId/$attemptId'
      fullPath: '/s/$testId/$attemptId'
      preLoaderRoute: typeof participantSTestIdAttemptIdRouteImport
      parentRoute: typeof participantRouteRoute
    }
    '/(organizer)/app/tests/details': {
      id: '/(organizer)/app/tests/details'
      path: '/tests/details'
      fullPath: '/app/tests/details'
      preLoaderRoute: typeof organizerAppTestsDetailsRouteImport
      parentRoute: typeof organizerAppRouteRoute
    }
    '/(organizer)/app/questions/template': {
      id: '/(organizer)/app/questions/template'
      path: '/questions/template'
      fullPath: '/app/questions/template'
      preLoaderRoute: typeof organizerAppQuestionsTemplateRouteImport
      parentRoute: typeof organizerAppRouteRoute
    }
    '/(organizer)/app/questions/library': {
      id: '/(organizer)/app/questions/library'
      path: '/questions/library'
      fullPath: '/app/questions/library'
      preLoaderRoute: typeof organizerAppQuestionsLibraryRouteImport
      parentRoute: typeof organizerAppRouteRoute
    }
    '/(organizer)/app/questions/details': {
      id: '/(organizer)/app/questions/details'
      path: '/questions/details'
      fullPath: '/app/questions/details'
      preLoaderRoute: typeof organizerAppQuestionsDetailsRouteImport
      parentRoute: typeof organizerAppRouteRoute
    }
  }
}

interface participantRouteRouteChildren {
  participantSTestIdAttemptIdRoute: typeof participantSTestIdAttemptIdRoute
  participantSTestIdResultsRoute: typeof participantSTestIdResultsRoute
  participantSTestIdIndexRoute: typeof participantSTestIdIndexRoute
}

const participantRouteRouteChildren: participantRouteRouteChildren = {
  participantSTestIdAttemptIdRoute: participantSTestIdAttemptIdRoute,
  participantSTestIdResultsRoute: participantSTestIdResultsRoute,
  participantSTestIdIndexRoute: participantSTestIdIndexRoute,
}

const participantRouteRouteWithChildren =
  participantRouteRoute._addFileChildren(participantRouteRouteChildren)

interface organizerAppRouteRouteChildren {
  organizerAppParticipantsRoute: typeof organizerAppParticipantsRoute
  organizerAppSettingsRoute: typeof organizerAppSettingsRoute
  organizerAppIndexRoute: typeof organizerAppIndexRoute
  organizerAppQuestionsDetailsRoute: typeof organizerAppQuestionsDetailsRoute
  organizerAppQuestionsLibraryRoute: typeof organizerAppQuestionsLibraryRoute
  organizerAppQuestionsTemplateRoute: typeof organizerAppQuestionsTemplateRoute
  organizerAppTestsDetailsRoute: typeof organizerAppTestsDetailsRoute
  organizerAppQuestionsIndexRoute: typeof organizerAppQuestionsIndexRoute
  organizerAppTestsIndexRoute: typeof organizerAppTestsIndexRoute
}

const organizerAppRouteRouteChildren: organizerAppRouteRouteChildren = {
  organizerAppParticipantsRoute: organizerAppParticipantsRoute,
  organizerAppSettingsRoute: organizerAppSettingsRoute,
  organizerAppIndexRoute: organizerAppIndexRoute,
  organizerAppQuestionsDetailsRoute: organizerAppQuestionsDetailsRoute,
  organizerAppQuestionsLibraryRoute: organizerAppQuestionsLibraryRoute,
  organizerAppQuestionsTemplateRoute: organizerAppQuestionsTemplateRoute,
  organizerAppTestsDetailsRoute: organizerAppTestsDetailsRoute,
  organizerAppQuestionsIndexRoute: organizerAppQuestionsIndexRoute,
  organizerAppTestsIndexRoute: organizerAppTestsIndexRoute,
}

const organizerAppRouteRouteWithChildren =
  organizerAppRouteRoute._addFileChildren(organizerAppRouteRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  participantRouteRoute: participantRouteRouteWithChildren,
  PricingRoute: PricingRoute,
  UseCasesRoute: UseCasesRoute,
  organizerAppRouteRoute: organizerAppRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
