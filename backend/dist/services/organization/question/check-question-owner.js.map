{"version":3,"sources":["../../../../src/services/organization/question/check-question-owner.ts"],"names":["checkQuestionOwner","questionIds","organizationId","questionIdsCondition","id","eq","question","questions","db","and","or"],"mappings":"iHAIA,eAAsBA,CAAAA,CACpBC,CACAC,CAAAA,CAAAA,CACA,CACA,MAAMC,CAAuBF,CAAAA,CAAAA,CAAY,GAAKG,CAAAA,CAAAA,EAAOC,EAAGC,CAAAA,QAAAA,CAAS,EAAIF,CAAAA,CAAE,CAAC,CAElEG,CAAAA,CAAAA,CAAY,MAAMC,CAAAA,CAAG,KAAM,CAAA,QAAA,CAAS,QAAS,CAAA,CACjD,KAAOC,CAAAA,GAAAA,CACHC,EAAG,CAAA,GAAGP,CAAoB,CAAA,CAC1BE,EAAGC,CAAAA,QAAAA,CAAS,cAAgBJ,CAAAA,CAAc,CAC5C,CACJ,CAAC,CAAA,CAED,GAAIK,CAAAA,CAAU,MAAWN,GAAAA,CAAAA,CAAY,MACnC,CAAA,MAAM,IAAI,KAAA,CAAM,kDAAkD,CAAA,CAGpE,OAAOM,CACT","file":"check-question-owner.js","sourcesContent":["import { and, eq, or } from \"drizzle-orm\";\nimport db from \"../../../lib/db\";\nimport { question } from \"../../../lib/db/schema\";\n\nexport async function checkQuestionOwner(\n  questionIds: string[],\n  organizationId: string\n) {\n  const questionIdsCondition = questionIds.map((id) => eq(question.id, id));\n\n  const questions = await db.query.question.findMany({\n    where: and(\n        or(...questionIdsCondition),\n        eq(question.organizationId, organizationId)\n      ),\n  });\n\n  if (questions.length !== questionIds.length) {\n    throw new Error(\"Some questions are not owned by the organization\");\n  }\n\n  return questions;\n}\n"]}