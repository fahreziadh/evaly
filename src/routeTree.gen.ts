/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AppRouteImport } from './routes/app/route'
import { Route as IndexImport } from './routes/index'
import { Route as AppIndexImport } from './routes/app/index'
import { Route as AppSettingsImport } from './routes/app/settings'
import { Route as AppParticipantsImport } from './routes/app/participants'
import { Route as AppTestsIndexImport } from './routes/app/tests/index'
import { Route as AppQuestionsIndexImport } from './routes/app/questions/index'
import { Route as AppTestsDetailsImport } from './routes/app/tests/details'
import { Route as AppQuestionsDetailsImport } from './routes/app/questions/details'
import { Route as participantSTestIdImport } from './routes/(participant)/s.$testId'

// Create/Update Routes

const AppRouteRoute = AppRouteImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AppIndexRoute = AppIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppRouteRoute,
} as any)

const AppSettingsRoute = AppSettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => AppRouteRoute,
} as any)

const AppParticipantsRoute = AppParticipantsImport.update({
  id: '/participants',
  path: '/participants',
  getParentRoute: () => AppRouteRoute,
} as any)

const AppTestsIndexRoute = AppTestsIndexImport.update({
  id: '/tests/',
  path: '/tests/',
  getParentRoute: () => AppRouteRoute,
} as any)

const AppQuestionsIndexRoute = AppQuestionsIndexImport.update({
  id: '/questions/',
  path: '/questions/',
  getParentRoute: () => AppRouteRoute,
} as any)

const AppTestsDetailsRoute = AppTestsDetailsImport.update({
  id: '/tests/details',
  path: '/tests/details',
  getParentRoute: () => AppRouteRoute,
} as any)

const AppQuestionsDetailsRoute = AppQuestionsDetailsImport.update({
  id: '/questions/details',
  path: '/questions/details',
  getParentRoute: () => AppRouteRoute,
} as any)

const participantSTestIdRoute = participantSTestIdImport.update({
  id: '/(participant)/s/$testId',
  path: '/s/$testId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppRouteImport
      parentRoute: typeof rootRoute
    }
    '/app/participants': {
      id: '/app/participants'
      path: '/participants'
      fullPath: '/app/participants'
      preLoaderRoute: typeof AppParticipantsImport
      parentRoute: typeof AppRouteImport
    }
    '/app/settings': {
      id: '/app/settings'
      path: '/settings'
      fullPath: '/app/settings'
      preLoaderRoute: typeof AppSettingsImport
      parentRoute: typeof AppRouteImport
    }
    '/app/': {
      id: '/app/'
      path: '/'
      fullPath: '/app/'
      preLoaderRoute: typeof AppIndexImport
      parentRoute: typeof AppRouteImport
    }
    '/(participant)/s/$testId': {
      id: '/(participant)/s/$testId'
      path: '/s/$testId'
      fullPath: '/s/$testId'
      preLoaderRoute: typeof participantSTestIdImport
      parentRoute: typeof rootRoute
    }
    '/app/questions/details': {
      id: '/app/questions/details'
      path: '/questions/details'
      fullPath: '/app/questions/details'
      preLoaderRoute: typeof AppQuestionsDetailsImport
      parentRoute: typeof AppRouteImport
    }
    '/app/tests/details': {
      id: '/app/tests/details'
      path: '/tests/details'
      fullPath: '/app/tests/details'
      preLoaderRoute: typeof AppTestsDetailsImport
      parentRoute: typeof AppRouteImport
    }
    '/app/questions/': {
      id: '/app/questions/'
      path: '/questions'
      fullPath: '/app/questions'
      preLoaderRoute: typeof AppQuestionsIndexImport
      parentRoute: typeof AppRouteImport
    }
    '/app/tests/': {
      id: '/app/tests/'
      path: '/tests'
      fullPath: '/app/tests'
      preLoaderRoute: typeof AppTestsIndexImport
      parentRoute: typeof AppRouteImport
    }
  }
}

// Create and export the route tree

interface AppRouteRouteChildren {
  AppParticipantsRoute: typeof AppParticipantsRoute
  AppSettingsRoute: typeof AppSettingsRoute
  AppIndexRoute: typeof AppIndexRoute
  AppQuestionsDetailsRoute: typeof AppQuestionsDetailsRoute
  AppTestsDetailsRoute: typeof AppTestsDetailsRoute
  AppQuestionsIndexRoute: typeof AppQuestionsIndexRoute
  AppTestsIndexRoute: typeof AppTestsIndexRoute
}

const AppRouteRouteChildren: AppRouteRouteChildren = {
  AppParticipantsRoute: AppParticipantsRoute,
  AppSettingsRoute: AppSettingsRoute,
  AppIndexRoute: AppIndexRoute,
  AppQuestionsDetailsRoute: AppQuestionsDetailsRoute,
  AppTestsDetailsRoute: AppTestsDetailsRoute,
  AppQuestionsIndexRoute: AppQuestionsIndexRoute,
  AppTestsIndexRoute: AppTestsIndexRoute,
}

const AppRouteRouteWithChildren = AppRouteRoute._addFileChildren(
  AppRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/app': typeof AppRouteRouteWithChildren
  '/app/participants': typeof AppParticipantsRoute
  '/app/settings': typeof AppSettingsRoute
  '/app/': typeof AppIndexRoute
  '/s/$testId': typeof participantSTestIdRoute
  '/app/questions/details': typeof AppQuestionsDetailsRoute
  '/app/tests/details': typeof AppTestsDetailsRoute
  '/app/questions': typeof AppQuestionsIndexRoute
  '/app/tests': typeof AppTestsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/app/participants': typeof AppParticipantsRoute
  '/app/settings': typeof AppSettingsRoute
  '/app': typeof AppIndexRoute
  '/s/$testId': typeof participantSTestIdRoute
  '/app/questions/details': typeof AppQuestionsDetailsRoute
  '/app/tests/details': typeof AppTestsDetailsRoute
  '/app/questions': typeof AppQuestionsIndexRoute
  '/app/tests': typeof AppTestsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/app': typeof AppRouteRouteWithChildren
  '/app/participants': typeof AppParticipantsRoute
  '/app/settings': typeof AppSettingsRoute
  '/app/': typeof AppIndexRoute
  '/(participant)/s/$testId': typeof participantSTestIdRoute
  '/app/questions/details': typeof AppQuestionsDetailsRoute
  '/app/tests/details': typeof AppTestsDetailsRoute
  '/app/questions/': typeof AppQuestionsIndexRoute
  '/app/tests/': typeof AppTestsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/app'
    | '/app/participants'
    | '/app/settings'
    | '/app/'
    | '/s/$testId'
    | '/app/questions/details'
    | '/app/tests/details'
    | '/app/questions'
    | '/app/tests'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/app/participants'
    | '/app/settings'
    | '/app'
    | '/s/$testId'
    | '/app/questions/details'
    | '/app/tests/details'
    | '/app/questions'
    | '/app/tests'
  id:
    | '__root__'
    | '/'
    | '/app'
    | '/app/participants'
    | '/app/settings'
    | '/app/'
    | '/(participant)/s/$testId'
    | '/app/questions/details'
    | '/app/tests/details'
    | '/app/questions/'
    | '/app/tests/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppRouteRoute: typeof AppRouteRouteWithChildren
  participantSTestIdRoute: typeof participantSTestIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppRouteRoute: AppRouteRouteWithChildren,
  participantSTestIdRoute: participantSTestIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/app",
        "/(participant)/s/$testId"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/app": {
      "filePath": "app/route.tsx",
      "children": [
        "/app/participants",
        "/app/settings",
        "/app/",
        "/app/questions/details",
        "/app/tests/details",
        "/app/questions/",
        "/app/tests/"
      ]
    },
    "/app/participants": {
      "filePath": "app/participants.tsx",
      "parent": "/app"
    },
    "/app/settings": {
      "filePath": "app/settings.tsx",
      "parent": "/app"
    },
    "/app/": {
      "filePath": "app/index.tsx",
      "parent": "/app"
    },
    "/(participant)/s/$testId": {
      "filePath": "(participant)/s.$testId.tsx"
    },
    "/app/questions/details": {
      "filePath": "app/questions/details.tsx",
      "parent": "/app"
    },
    "/app/tests/details": {
      "filePath": "app/tests/details.tsx",
      "parent": "/app"
    },
    "/app/questions/": {
      "filePath": "app/questions/index.tsx",
      "parent": "/app"
    },
    "/app/tests/": {
      "filePath": "app/tests/index.tsx",
      "parent": "/app"
    }
  }
}
ROUTE_MANIFEST_END */
